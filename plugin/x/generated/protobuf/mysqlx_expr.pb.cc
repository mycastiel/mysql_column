// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_expr.proto

#include "mysqlx_expr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mysqlx_5fdatatypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fdatatypes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Scalar;
}  // namespace protobuf_mysqlx_5fdatatypes_2eproto
namespace protobuf_mysqlx_5fexpr_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fexpr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DocumentPathItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fexpr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fexpr_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ColumnIdentifier;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fexpr_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Array;
}  // namespace protobuf_mysqlx_5fexpr_2eproto
namespace Mysqlx {
namespace Expr {
class ExprDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Expr>
      _instance;
} _Expr_default_instance_;
class IdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Identifier>
      _instance;
} _Identifier_default_instance_;
class DocumentPathItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DocumentPathItem>
      _instance;
} _DocumentPathItem_default_instance_;
class ColumnIdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnIdentifier>
      _instance;
} _ColumnIdentifier_default_instance_;
class FunctionCallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FunctionCall>
      _instance;
} _FunctionCall_default_instance_;
class OperatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Operator>
      _instance;
} _Operator_default_instance_;
class Object_ObjectFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object_ObjectField>
      _instance;
} _Object_ObjectField_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object>
      _instance;
} _Object_default_instance_;
class ArrayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Array>
      _instance;
} _Array_default_instance_;
}  // namespace Expr
}  // namespace Mysqlx
namespace protobuf_mysqlx_5fexpr_2eproto {
static void InitDefaultsIdentifier() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Expr::_Identifier_default_instance_;
    new (ptr) ::Mysqlx::Expr::Identifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Expr::Identifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Identifier =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIdentifier}, {}};

static void InitDefaultsDocumentPathItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Expr::_DocumentPathItem_default_instance_;
    new (ptr) ::Mysqlx::Expr::DocumentPathItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Expr::DocumentPathItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DocumentPathItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDocumentPathItem}, {}};

static void InitDefaultsColumnIdentifier() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Expr::_ColumnIdentifier_default_instance_;
    new (ptr) ::Mysqlx::Expr::ColumnIdentifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Expr::ColumnIdentifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ColumnIdentifier =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsColumnIdentifier}, {
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_DocumentPathItem.base,}};

static void InitDefaultsArray() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Expr::_Expr_default_instance_;
    new (ptr) ::Mysqlx::Expr::Expr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Expr::_FunctionCall_default_instance_;
    new (ptr) ::Mysqlx::Expr::FunctionCall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Expr::_Operator_default_instance_;
    new (ptr) ::Mysqlx::Expr::Operator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Expr::_Object_ObjectField_default_instance_;
    new (ptr) ::Mysqlx::Expr::Object_ObjectField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Expr::_Object_default_instance_;
    new (ptr) ::Mysqlx::Expr::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Expr::_Array_default_instance_;
    new (ptr) ::Mysqlx::Expr::Array();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Expr::Expr::InitAsDefaultInstance();
  ::Mysqlx::Expr::FunctionCall::InitAsDefaultInstance();
  ::Mysqlx::Expr::Operator::InitAsDefaultInstance();
  ::Mysqlx::Expr::Object_ObjectField::InitAsDefaultInstance();
  ::Mysqlx::Expr::Object::InitAsDefaultInstance();
  ::Mysqlx::Expr::Array::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Array =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsArray}, {
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_ColumnIdentifier.base,
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar.base,
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_Identifier.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Identifier.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DocumentPathItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnIdentifier.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Array.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, variable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, literal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, function_call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, operator__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Expr, array_),
  8,
  1,
  0,
  2,
  3,
  4,
  7,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Identifier, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Identifier, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Identifier, schema_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::DocumentPathItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::DocumentPathItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::DocumentPathItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::DocumentPathItem, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::DocumentPathItem, index_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::ColumnIdentifier, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::ColumnIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::ColumnIdentifier, document_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::ColumnIdentifier, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::ColumnIdentifier, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::ColumnIdentifier, schema_name_),
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::FunctionCall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::FunctionCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::FunctionCall, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::FunctionCall, param_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Operator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Operator, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Operator, param_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Object_ObjectField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Object_ObjectField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Object_ObjectField, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Object_ObjectField, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Object, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Object, fld_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Array, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expr::Array, value_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::Mysqlx::Expr::Expr)},
  { 23, 30, sizeof(::Mysqlx::Expr::Identifier)},
  { 32, 40, sizeof(::Mysqlx::Expr::DocumentPathItem)},
  { 43, 52, sizeof(::Mysqlx::Expr::ColumnIdentifier)},
  { 56, 63, sizeof(::Mysqlx::Expr::FunctionCall)},
  { 65, 72, sizeof(::Mysqlx::Expr::Operator)},
  { 74, 81, sizeof(::Mysqlx::Expr::Object_ObjectField)},
  { 83, 89, sizeof(::Mysqlx::Expr::Object)},
  { 90, 96, sizeof(::Mysqlx::Expr::Array)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_Expr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_Identifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_DocumentPathItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_ColumnIdentifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_FunctionCall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_Operator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_Object_ObjectField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expr::_Array_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mysqlx_expr.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021mysqlx_expr.proto\022\013Mysqlx.Expr\032\026mysqlx"
      "_datatypes.proto\"\304\003\n\004Expr\022$\n\004type\030\001 \002(\0162"
      "\026.Mysqlx.Expr.Expr.Type\0221\n\nidentifier\030\002 "
      "\001(\0132\035.Mysqlx.Expr.ColumnIdentifier\022\020\n\010va"
      "riable\030\003 \001(\t\022)\n\007literal\030\004 \001(\0132\030.Mysqlx.D"
      "atatypes.Scalar\0220\n\rfunction_call\030\005 \001(\0132\031"
      ".Mysqlx.Expr.FunctionCall\022\'\n\010operator\030\006 "
      "\001(\0132\025.Mysqlx.Expr.Operator\022\020\n\010position\030\007"
      " \001(\r\022#\n\006object\030\010 \001(\0132\023.Mysqlx.Expr.Objec"
      "t\022!\n\005array\030\t \001(\0132\022.Mysqlx.Expr.Array\"q\n\004"
      "Type\022\t\n\005IDENT\020\001\022\013\n\007LITERAL\020\002\022\014\n\010VARIABLE"
      "\020\003\022\r\n\tFUNC_CALL\020\004\022\014\n\010OPERATOR\020\005\022\017\n\013PLACE"
      "HOLDER\020\006\022\n\n\006OBJECT\020\007\022\t\n\005ARRAY\020\010\"/\n\nIdent"
      "ifier\022\014\n\004name\030\001 \002(\t\022\023\n\013schema_name\030\002 \001(\t"
      "\"\313\001\n\020DocumentPathItem\0220\n\004type\030\001 \002(\0162\".My"
      "sqlx.Expr.DocumentPathItem.Type\022\r\n\005value"
      "\030\002 \001(\t\022\r\n\005index\030\003 \001(\r\"g\n\004Type\022\n\n\006MEMBER\020"
      "\001\022\023\n\017MEMBER_ASTERISK\020\002\022\017\n\013ARRAY_INDEX\020\003\022"
      "\030\n\024ARRAY_INDEX_ASTERISK\020\004\022\023\n\017DOUBLE_ASTE"
      "RISK\020\005\"\177\n\020ColumnIdentifier\0224\n\rdocument_p"
      "ath\030\001 \003(\0132\035.Mysqlx.Expr.DocumentPathItem"
      "\022\014\n\004name\030\002 \001(\t\022\022\n\ntable_name\030\003 \001(\t\022\023\n\013sc"
      "hema_name\030\004 \001(\t\"W\n\014FunctionCall\022%\n\004name\030"
      "\001 \002(\0132\027.Mysqlx.Expr.Identifier\022 \n\005param\030"
      "\002 \003(\0132\021.Mysqlx.Expr.Expr\":\n\010Operator\022\014\n\004"
      "name\030\001 \002(\t\022 \n\005param\030\002 \003(\0132\021.Mysqlx.Expr."
      "Expr\"t\n\006Object\022,\n\003fld\030\001 \003(\0132\037.Mysqlx.Exp"
      "r.Object.ObjectField\032<\n\013ObjectField\022\013\n\003k"
      "ey\030\001 \002(\t\022 \n\005value\030\002 \002(\0132\021.Mysqlx.Expr.Ex"
      "pr\")\n\005Array\022 \n\005value\030\001 \003(\0132\021.Mysqlx.Expr"
      ".ExprB\031\n\027com.mysql.cj.x.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_expr.proto", &protobuf_RegisterTypes);
  ::protobuf_mysqlx_5fdatatypes_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mysqlx_5fexpr_2eproto
namespace Mysqlx {
namespace Expr {
const ::google::protobuf::EnumDescriptor* Expr_Type_descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_enum_descriptors[0];
}
bool Expr_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Expr_Type Expr::IDENT;
const Expr_Type Expr::LITERAL;
const Expr_Type Expr::VARIABLE;
const Expr_Type Expr::FUNC_CALL;
const Expr_Type Expr::OPERATOR;
const Expr_Type Expr::PLACEHOLDER;
const Expr_Type Expr::OBJECT;
const Expr_Type Expr::ARRAY;
const Expr_Type Expr::Type_MIN;
const Expr_Type Expr::Type_MAX;
const int Expr::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DocumentPathItem_Type_descriptor() {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpr_2eproto::file_level_enum_descriptors[1];
}
bool DocumentPathItem_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DocumentPathItem_Type DocumentPathItem::MEMBER;
const DocumentPathItem_Type DocumentPathItem::MEMBER_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::ARRAY_INDEX;
const DocumentPathItem_Type DocumentPathItem::ARRAY_INDEX_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::DOUBLE_ASTERISK;
const DocumentPathItem_Type DocumentPathItem::Type_MIN;
const DocumentPathItem_Type DocumentPathItem::Type_MAX;
const int DocumentPathItem::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Expr::InitAsDefaultInstance() {
  ::Mysqlx::Expr::_Expr_default_instance_._instance.get_mutable()->identifier_ = const_cast< ::Mysqlx::Expr::ColumnIdentifier*>(
      ::Mysqlx::Expr::ColumnIdentifier::internal_default_instance());
  ::Mysqlx::Expr::_Expr_default_instance_._instance.get_mutable()->literal_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
  ::Mysqlx::Expr::_Expr_default_instance_._instance.get_mutable()->function_call_ = const_cast< ::Mysqlx::Expr::FunctionCall*>(
      ::Mysqlx::Expr::FunctionCall::internal_default_instance());
  ::Mysqlx::Expr::_Expr_default_instance_._instance.get_mutable()->operator__ = const_cast< ::Mysqlx::Expr::Operator*>(
      ::Mysqlx::Expr::Operator::internal_default_instance());
  ::Mysqlx::Expr::_Expr_default_instance_._instance.get_mutable()->object_ = const_cast< ::Mysqlx::Expr::Object*>(
      ::Mysqlx::Expr::Object::internal_default_instance());
  ::Mysqlx::Expr::_Expr_default_instance_._instance.get_mutable()->array_ = const_cast< ::Mysqlx::Expr::Array*>(
      ::Mysqlx::Expr::Array::internal_default_instance());
}
void Expr::clear_literal() {
  if (literal_ != NULL) literal_->Clear();
  clear_has_literal();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Expr::kTypeFieldNumber;
const int Expr::kIdentifierFieldNumber;
const int Expr::kVariableFieldNumber;
const int Expr::kLiteralFieldNumber;
const int Expr::kFunctionCallFieldNumber;
const int Expr::kOperatorFieldNumber;
const int Expr::kPositionFieldNumber;
const int Expr::kObjectFieldNumber;
const int Expr::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Expr::Expr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Expr)
}
Expr::Expr(const Expr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_variable()) {
    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.has_identifier()) {
    identifier_ = new ::Mysqlx::Expr::ColumnIdentifier(*from.identifier_);
  } else {
    identifier_ = NULL;
  }
  if (from.has_literal()) {
    literal_ = new ::Mysqlx::Datatypes::Scalar(*from.literal_);
  } else {
    literal_ = NULL;
  }
  if (from.has_function_call()) {
    function_call_ = new ::Mysqlx::Expr::FunctionCall(*from.function_call_);
  } else {
    function_call_ = NULL;
  }
  if (from.has_operator_()) {
    operator__ = new ::Mysqlx::Expr::Operator(*from.operator__);
  } else {
    operator__ = NULL;
  }
  if (from.has_object()) {
    object_ = new ::Mysqlx::Expr::Object(*from.object_);
  } else {
    object_ = NULL;
  }
  if (from.has_array()) {
    array_ = new ::Mysqlx::Expr::Array(*from.array_);
  } else {
    array_ = NULL;
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Expr)
}

void Expr::SharedCtor() {
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(position_));
  type_ = 1;
}

Expr::~Expr() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Expr)
  SharedDtor();
}

void Expr::SharedDtor() {
  variable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identifier_;
  if (this != internal_default_instance()) delete literal_;
  if (this != internal_default_instance()) delete function_call_;
  if (this != internal_default_instance()) delete operator__;
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete array_;
}

void Expr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Expr::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Expr& Expr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  return *internal_default_instance();
}


void Expr::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      variable_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(identifier_ != NULL);
      identifier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(literal_ != NULL);
      literal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(function_call_ != NULL);
      function_call_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(operator__ != NULL);
      operator__->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(object_ != NULL);
      object_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(array_ != NULL);
      array_->Clear();
    }
  }
  position_ = 0u;
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Expr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Expr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.Expr.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expr::Expr_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Expr::Expr_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string variable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->variable().data(), static_cast<int>(this->variable().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Expr.variable");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar literal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.FunctionCall function_call = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_function_call()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.Operator operator = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_operator_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.Object object = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expr.Array array = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Expr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Expr)
  return false;
#undef DO_
}

void Expr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Expr.Expr.Type type = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_identifier(), output);
  }

  // optional string variable = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variable().data(), static_cast<int>(this->variable().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Expr.variable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->variable(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar literal = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_literal(), output);
  }

  // optional .Mysqlx.Expr.FunctionCall function_call = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_function_call(), output);
  }

  // optional .Mysqlx.Expr.Operator operator = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_operator_(), output);
  }

  // optional uint32 position = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->position(), output);
  }

  // optional .Mysqlx.Expr.Object object = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_object(), output);
  }

  // optional .Mysqlx.Expr.Array array = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_array(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Expr)
}

::google::protobuf::uint8* Expr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Expr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Expr.Expr.Type type = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_identifier(), deterministic, target);
  }

  // optional string variable = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variable().data(), static_cast<int>(this->variable().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Expr.variable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->variable(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar literal = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_literal(), deterministic, target);
  }

  // optional .Mysqlx.Expr.FunctionCall function_call = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_function_call(), deterministic, target);
  }

  // optional .Mysqlx.Expr.Operator operator = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_operator_(), deterministic, target);
  }

  // optional uint32 position = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->position(), target);
  }

  // optional .Mysqlx.Expr.Object object = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_object(), deterministic, target);
  }

  // optional .Mysqlx.Expr.Array array = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_array(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Expr)
  return target;
}

size_t Expr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Expr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Mysqlx.Expr.Expr.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string variable = 3;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->variable());
    }

    // optional .Mysqlx.Expr.ColumnIdentifier identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identifier_);
    }

    // optional .Mysqlx.Datatypes.Scalar literal = 4;
    if (has_literal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *literal_);
    }

    // optional .Mysqlx.Expr.FunctionCall function_call = 5;
    if (has_function_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *function_call_);
    }

    // optional .Mysqlx.Expr.Operator operator = 6;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *operator__);
    }

    // optional .Mysqlx.Expr.Object object = 8;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_);
    }

    // optional .Mysqlx.Expr.Array array = 9;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *array_);
    }

    // optional uint32 position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Expr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  const Expr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Expr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Expr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Expr)
    MergeFrom(*source);
  }
}

void Expr::MergeFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Expr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_variable();
      variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_identifier()->::Mysqlx::Expr::ColumnIdentifier::MergeFrom(from.identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_literal()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.literal());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_function_call()->::Mysqlx::Expr::FunctionCall::MergeFrom(from.function_call());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_operator_()->::Mysqlx::Expr::Operator::MergeFrom(from.operator_());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_object()->::Mysqlx::Expr::Object::MergeFrom(from.object());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_array()->::Mysqlx::Expr::Array::MergeFrom(from.array());
    }
    if (cached_has_bits & 0x00000080u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_type(from.type());
  }
}

void Expr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expr::CopyFrom(const Expr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Expr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  if (has_identifier()) {
    if (!this->identifier_->IsInitialized()) return false;
  }
  if (has_literal()) {
    if (!this->literal_->IsInitialized()) return false;
  }
  if (has_function_call()) {
    if (!this->function_call_->IsInitialized()) return false;
  }
  if (has_operator_()) {
    if (!this->operator__->IsInitialized()) return false;
  }
  if (has_object()) {
    if (!this->object_->IsInitialized()) return false;
  }
  if (has_array()) {
    if (!this->array_->IsInitialized()) return false;
  }
  return true;
}

void Expr::Swap(Expr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Expr::InternalSwap(Expr* other) {
  using std::swap;
  variable_.Swap(&other->variable_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identifier_, other->identifier_);
  swap(literal_, other->literal_);
  swap(function_call_, other->function_call_);
  swap(operator__, other->operator__);
  swap(object_, other->object_);
  swap(array_, other->array_);
  swap(position_, other->position_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Expr::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Identifier::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Identifier::kNameFieldNumber;
const int Identifier::kSchemaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Identifier::Identifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_Identifier.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Identifier)
}

void Identifier::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Identifier)
  SharedDtor();
}

void Identifier::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Identifier::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Identifier& Identifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_Identifier.base);
  return *internal_default_instance();
}


void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      schema_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Identifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Identifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Identifier.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), static_cast<int>(this->schema_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Identifier.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Identifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Identifier)
  return false;
#undef DO_
}

void Identifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Identifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Identifier.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->schema_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Identifier)
}

::google::protobuf::uint8* Identifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Identifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Identifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string schema_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Identifier.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->schema_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Identifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional string schema_name = 2;
  if (has_schema_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schema_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Identifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Identifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Identifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
  }
}

void Identifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Identifier::Swap(Identifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_name_.Swap(&other->schema_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Identifier::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DocumentPathItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentPathItem::kTypeFieldNumber;
const int DocumentPathItem::kValueFieldNumber;
const int DocumentPathItem::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentPathItem::DocumentPathItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_DocumentPathItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.DocumentPathItem)
}
DocumentPathItem::DocumentPathItem(const DocumentPathItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.DocumentPathItem)
}

void DocumentPathItem::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  type_ = 1;
}

DocumentPathItem::~DocumentPathItem() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.DocumentPathItem)
  SharedDtor();
}

void DocumentPathItem::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocumentPathItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DocumentPathItem::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentPathItem& DocumentPathItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_DocumentPathItem.base);
  return *internal_default_instance();
}


void DocumentPathItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.DocumentPathItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    index_ = 0u;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentPathItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.DocumentPathItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expr::DocumentPathItem_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Expr::DocumentPathItem_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.DocumentPathItem.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.DocumentPathItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.DocumentPathItem)
  return false;
#undef DO_
}

void DocumentPathItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.DocumentPathItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.DocumentPathItem.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.DocumentPathItem)
}

::google::protobuf::uint8* DocumentPathItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.DocumentPathItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.DocumentPathItem.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint32 index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.DocumentPathItem)
  return target;
}

size_t DocumentPathItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.DocumentPathItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Mysqlx.Expr.DocumentPathItem.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentPathItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.DocumentPathItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentPathItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentPathItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.DocumentPathItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.DocumentPathItem)
    MergeFrom(*source);
  }
}

void DocumentPathItem::MergeFrom(const DocumentPathItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.DocumentPathItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentPathItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.DocumentPathItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentPathItem::CopyFrom(const DocumentPathItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.DocumentPathItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentPathItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void DocumentPathItem::Swap(DocumentPathItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentPathItem::InternalSwap(DocumentPathItem* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DocumentPathItem::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnIdentifier::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnIdentifier::kDocumentPathFieldNumber;
const int ColumnIdentifier::kNameFieldNumber;
const int ColumnIdentifier::kTableNameFieldNumber;
const int ColumnIdentifier::kSchemaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnIdentifier::ColumnIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_ColumnIdentifier.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.ColumnIdentifier)
}
ColumnIdentifier::ColumnIdentifier(const ColumnIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      document_path_(from.document_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_name()) {
    schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.ColumnIdentifier)
}

void ColumnIdentifier::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ColumnIdentifier::~ColumnIdentifier() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.ColumnIdentifier)
  SharedDtor();
}

void ColumnIdentifier::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ColumnIdentifier::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnIdentifier& ColumnIdentifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_ColumnIdentifier.base);
  return *internal_default_instance();
}


void ColumnIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.ColumnIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      schema_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.ColumnIdentifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_document_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.ColumnIdentifier.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.ColumnIdentifier.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schema_name().data(), static_cast<int>(this->schema_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.ColumnIdentifier.schema_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.ColumnIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.ColumnIdentifier)
  return false;
#undef DO_
}

void ColumnIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.ColumnIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->document_path(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  // optional string schema_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.schema_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->schema_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.ColumnIdentifier)
}

::google::protobuf::uint8* ColumnIdentifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.ColumnIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->document_path(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  // optional string schema_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schema_name().data(), static_cast<int>(this->schema_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.ColumnIdentifier.schema_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->schema_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.ColumnIdentifier)
  return target;
}

size_t ColumnIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.ColumnIdentifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Mysqlx.Expr.DocumentPathItem document_path = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->document_path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->document_path(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional string schema_name = 4;
    if (has_schema_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schema_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.ColumnIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnIdentifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnIdentifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.ColumnIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.ColumnIdentifier)
    MergeFrom(*source);
  }
}

void ColumnIdentifier::MergeFrom(const ColumnIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.ColumnIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  document_path_.MergeFrom(from.document_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_schema_name();
      schema_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_name_);
    }
  }
}

void ColumnIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.ColumnIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnIdentifier::CopyFrom(const ColumnIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.ColumnIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnIdentifier::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->document_path())) return false;
  return true;
}

void ColumnIdentifier::Swap(ColumnIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnIdentifier::InternalSwap(ColumnIdentifier* other) {
  using std::swap;
  CastToBase(&document_path_)->InternalSwap(CastToBase(&other->document_path_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_name_.Swap(&other->schema_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ColumnIdentifier::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FunctionCall::InitAsDefaultInstance() {
  ::Mysqlx::Expr::_FunctionCall_default_instance_._instance.get_mutable()->name_ = const_cast< ::Mysqlx::Expr::Identifier*>(
      ::Mysqlx::Expr::Identifier::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FunctionCall::kNameFieldNumber;
const int FunctionCall::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FunctionCall::FunctionCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.FunctionCall)
}
FunctionCall::FunctionCall(const FunctionCall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::Mysqlx::Expr::Identifier(*from.name_);
  } else {
    name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.FunctionCall)
}

void FunctionCall::SharedCtor() {
  name_ = NULL;
}

FunctionCall::~FunctionCall() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.FunctionCall)
  SharedDtor();
}

void FunctionCall::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void FunctionCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FunctionCall::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FunctionCall& FunctionCall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  return *internal_default_instance();
}


void FunctionCall::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.FunctionCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(name_ != NULL);
    name_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FunctionCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.FunctionCall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Expr.Identifier name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Expr.Expr param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.FunctionCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.FunctionCall)
  return false;
#undef DO_
}

void FunctionCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.FunctionCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Expr.Identifier name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_name(), output);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->param(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.FunctionCall)
}

::google::protobuf::uint8* FunctionCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.FunctionCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Expr.Identifier name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_name(), deterministic, target);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->param(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.FunctionCall)
  return target;
}

size_t FunctionCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.FunctionCall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Mysqlx.Expr.Identifier name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *name_);
  }
  // repeated .Mysqlx.Expr.Expr param = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->param(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionCall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FunctionCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.FunctionCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.FunctionCall)
    MergeFrom(*source);
  }
}

void FunctionCall::MergeFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  if (from.has_name()) {
    mutable_name()->::Mysqlx::Expr::Identifier::MergeFrom(from.name());
  }
}

void FunctionCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  if (has_name()) {
    if (!this->name_->IsInitialized()) return false;
  }
  return true;
}

void FunctionCall::Swap(FunctionCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionCall::InternalSwap(FunctionCall* other) {
  using std::swap;
  CastToBase(&param_)->InternalSwap(CastToBase(&other->param_));
  swap(name_, other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FunctionCall::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Operator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operator::kNameFieldNumber;
const int Operator::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operator::Operator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Operator)
}
Operator::Operator(const Operator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Operator)
}

void Operator::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Operator::~Operator() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Operator)
  SharedDtor();
}

void Operator::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Operator::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Operator& Operator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  return *internal_default_instance();
}


void Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Operator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Operator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Operator.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Expr.Expr param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Operator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Operator)
  return false;
#undef DO_
}

void Operator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Operator.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->param(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Operator)
}

::google::protobuf::uint8* Operator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Operator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Operator.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Mysqlx.Expr.Expr param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->param(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Operator)
  return target;
}

size_t Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Operator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .Mysqlx.Expr.Expr param = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->param(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  const Operator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Operator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Operator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Operator)
    MergeFrom(*source);
  }
}

void Operator::MergeFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Operator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operator::CopyFrom(const Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Operator::Swap(Operator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operator::InternalSwap(Operator* other) {
  using std::swap;
  CastToBase(&param_)->InternalSwap(CastToBase(&other->param_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Operator::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Object_ObjectField::InitAsDefaultInstance() {
  ::Mysqlx::Expr::_Object_ObjectField_default_instance_._instance.get_mutable()->value_ = const_cast< ::Mysqlx::Expr::Expr*>(
      ::Mysqlx::Expr::Expr::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object_ObjectField::kKeyFieldNumber;
const int Object_ObjectField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object_ObjectField::Object_ObjectField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Object.ObjectField)
}
Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::Mysqlx::Expr::Expr(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Object.ObjectField)
}

void Object_ObjectField::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

Object_ObjectField::~Object_ObjectField() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Object.ObjectField)
  SharedDtor();
}

void Object_ObjectField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Object_ObjectField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Object_ObjectField::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object_ObjectField& Object_ObjectField::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  return *internal_default_instance();
}


void Object_ObjectField::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Object.ObjectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object_ObjectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Object.ObjectField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Mysqlx.Expr.Object.ObjectField.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Mysqlx.Expr.Expr value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Object.ObjectField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Object.ObjectField)
  return false;
#undef DO_
}

void Object_ObjectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Object.ObjectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Object.ObjectField.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .Mysqlx.Expr.Expr value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Object.ObjectField)
}

::google::protobuf::uint8* Object_ObjectField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Object.ObjectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Mysqlx.Expr.Object.ObjectField.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .Mysqlx.Expr.Expr value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Object.ObjectField)
  return target;
}

size_t Object_ObjectField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Expr.Object.ObjectField)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required .Mysqlx.Expr.Expr value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t Object_ObjectField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Object.ObjectField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required .Mysqlx.Expr.Expr value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_ObjectField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_ObjectField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object_ObjectField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Object.ObjectField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Object.ObjectField)
    MergeFrom(*source);
  }
}

void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::Mysqlx::Expr::Expr::MergeFrom(from.value());
    }
  }
}

void Object_ObjectField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::Swap(Object_ObjectField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object_ObjectField::InternalSwap(Object_ObjectField* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Object_ObjectField::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Object::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kFldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fld_(from.fld_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Object)
}

void Object::SharedCtor() {
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Object)
  SharedDtor();
}

void Object::SharedDtor() {
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fld_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fld()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fld_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fld(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fld_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fld(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Object)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Mysqlx.Expr.Object.ObjectField fld = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fld_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fld(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fld_.MergeFrom(from.fld_);
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->fld())) return false;
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  CastToBase(&fld_)->InternalSwap(CastToBase(&other->fld_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Array::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Array::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Array::Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expr.Array)
}
Array::Array(const Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expr.Array)
}

void Array::SharedCtor() {
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expr.Array)
  SharedDtor();
}

void Array::SharedDtor() {
}

void Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Array::descriptor() {
  ::protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Array& Array::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpr_2eproto::scc_info_Array.base);
  return *internal_default_instance();
}


void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expr.Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expr.Array)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Expr.Expr value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expr.Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expr.Array)
  return false;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expr.Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Expr.Expr value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->value(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expr.Array)
}

::google::protobuf::uint8* Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expr.Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Expr.Expr value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->value(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expr.Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expr.Array)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Mysqlx.Expr.Expr value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expr.Array)
  GOOGLE_DCHECK_NE(&from, this);
  const Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expr.Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expr.Array)
    MergeFrom(*source);
  }
}

void Array::MergeFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expr.Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expr.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expr.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  return true;
}

void Array::Swap(Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Array::InternalSwap(Array* other) {
  using std::swap;
  CastToBase(&value_)->InternalSwap(CastToBase(&other->value_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Array::GetMetadata() const {
  protobuf_mysqlx_5fexpr_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpr_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Expr
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::Expr* Arena::CreateMaybeMessage< ::Mysqlx::Expr::Expr >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::Expr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::Identifier* Arena::CreateMaybeMessage< ::Mysqlx::Expr::Identifier >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::Identifier >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::DocumentPathItem* Arena::CreateMaybeMessage< ::Mysqlx::Expr::DocumentPathItem >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::DocumentPathItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::ColumnIdentifier* Arena::CreateMaybeMessage< ::Mysqlx::Expr::ColumnIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::ColumnIdentifier >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::FunctionCall* Arena::CreateMaybeMessage< ::Mysqlx::Expr::FunctionCall >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::FunctionCall >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::Operator* Arena::CreateMaybeMessage< ::Mysqlx::Expr::Operator >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::Operator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::Object_ObjectField* Arena::CreateMaybeMessage< ::Mysqlx::Expr::Object_ObjectField >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::Object_ObjectField >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::Object* Arena::CreateMaybeMessage< ::Mysqlx::Expr::Object >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::Object >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expr::Array* Arena::CreateMaybeMessage< ::Mysqlx::Expr::Array >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expr::Array >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
