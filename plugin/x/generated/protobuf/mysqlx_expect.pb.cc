// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_expect.proto

#include "mysqlx_expect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mysqlx_5fexpect_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fexpect_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Open_Condition;
}  // namespace protobuf_mysqlx_5fexpect_2eproto
namespace Mysqlx {
namespace Expect {
class Open_ConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Open_Condition>
      _instance;
} _Open_Condition_default_instance_;
class OpenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Open>
      _instance;
} _Open_default_instance_;
class CloseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Close>
      _instance;
} _Close_default_instance_;
}  // namespace Expect
}  // namespace Mysqlx
namespace protobuf_mysqlx_5fexpect_2eproto {
static void InitDefaultsOpen_Condition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Expect::_Open_Condition_default_instance_;
    new (ptr) ::Mysqlx::Expect::Open_Condition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Expect::Open_Condition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Open_Condition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpen_Condition}, {}};

static void InitDefaultsOpen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Expect::_Open_default_instance_;
    new (ptr) ::Mysqlx::Expect::Open();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Expect::Open::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Open =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOpen}, {
      &protobuf_mysqlx_5fexpect_2eproto::scc_info_Open_Condition.base,}};

static void InitDefaultsClose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Expect::_Close_default_instance_;
    new (ptr) ::Mysqlx::Expect::Close();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Expect::Close::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Close =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClose}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Open_Condition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Open.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Close.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open_Condition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open_Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open_Condition, condition_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open_Condition, condition_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open_Condition, op_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Open, cond_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Close, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Expect::Close, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Mysqlx::Expect::Open_Condition)},
  { 11, 18, sizeof(::Mysqlx::Expect::Open)},
  { 20, 25, sizeof(::Mysqlx::Expect::Close)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expect::_Open_Condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expect::_Open_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Expect::_Close_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mysqlx_expect.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023mysqlx_expect.proto\022\rMysqlx.Expect\032\014my"
      "sqlx.proto\"\326\003\n\004Open\022B\n\002op\030\001 \001(\0162 .Mysqlx"
      ".Expect.Open.CtxOperation:\024EXPECT_CTX_CO"
      "PY_PREV\022+\n\004cond\030\002 \003(\0132\035.Mysqlx.Expect.Op"
      "en.Condition\032\226\002\n\tCondition\022\025\n\rcondition_"
      "key\030\001 \002(\r\022\027\n\017condition_value\030\002 \001(\014\022K\n\002op"
      "\030\003 \001(\01620.Mysqlx.Expect.Open.Condition.Co"
      "nditionOperation:\rEXPECT_OP_SET\"N\n\003Key\022\023"
      "\n\017EXPECT_NO_ERROR\020\001\022\026\n\022EXPECT_FIELD_EXIS"
      "T\020\002\022\032\n\026EXPECT_DOCID_GENERATED\020\003\"<\n\022Condi"
      "tionOperation\022\021\n\rEXPECT_OP_SET\020\000\022\023\n\017EXPE"
      "CT_OP_UNSET\020\001\">\n\014CtxOperation\022\030\n\024EXPECT_"
      "CTX_COPY_PREV\020\000\022\024\n\020EXPECT_CTX_EMPTY\020\001:\004\210"
      "\3520\030\"\r\n\005Close:\004\210\3520\031B\031\n\027com.mysql.cj.x.pro"
      "tobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_expect.proto", &protobuf_RegisterTypes);
  ::protobuf_mysqlx_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mysqlx_5fexpect_2eproto
namespace Mysqlx {
namespace Expect {
const ::google::protobuf::EnumDescriptor* Open_Condition_Key_descriptor() {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_enum_descriptors[0];
}
bool Open_Condition_Key_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Open_Condition_Key Open_Condition::EXPECT_NO_ERROR;
const Open_Condition_Key Open_Condition::EXPECT_FIELD_EXIST;
const Open_Condition_Key Open_Condition::EXPECT_DOCID_GENERATED;
const Open_Condition_Key Open_Condition::Key_MIN;
const Open_Condition_Key Open_Condition::Key_MAX;
const int Open_Condition::Key_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Open_Condition_ConditionOperation_descriptor() {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_enum_descriptors[1];
}
bool Open_Condition_ConditionOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Open_Condition_ConditionOperation Open_Condition::EXPECT_OP_SET;
const Open_Condition_ConditionOperation Open_Condition::EXPECT_OP_UNSET;
const Open_Condition_ConditionOperation Open_Condition::ConditionOperation_MIN;
const Open_Condition_ConditionOperation Open_Condition::ConditionOperation_MAX;
const int Open_Condition::ConditionOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Open_CtxOperation_descriptor() {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fexpect_2eproto::file_level_enum_descriptors[2];
}
bool Open_CtxOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Open_CtxOperation Open::EXPECT_CTX_COPY_PREV;
const Open_CtxOperation Open::EXPECT_CTX_EMPTY;
const Open_CtxOperation Open::CtxOperation_MIN;
const Open_CtxOperation Open::CtxOperation_MAX;
const int Open::CtxOperation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Open_Condition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Open_Condition::kConditionKeyFieldNumber;
const int Open_Condition::kConditionValueFieldNumber;
const int Open_Condition::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Open_Condition::Open_Condition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpect_2eproto::scc_info_Open_Condition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Open.Condition)
}
Open_Condition::Open_Condition(const Open_Condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  condition_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_condition_value()) {
    condition_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.condition_value_);
  }
  ::memcpy(&condition_key_, &from.condition_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&condition_key_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Open.Condition)
}

void Open_Condition::SharedCtor() {
  condition_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&condition_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&condition_key_)) + sizeof(op_));
}

Open_Condition::~Open_Condition() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Open.Condition)
  SharedDtor();
}

void Open_Condition::SharedDtor() {
  condition_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Open_Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Open_Condition::descriptor() {
  ::protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Open_Condition& Open_Condition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpect_2eproto::scc_info_Open_Condition.base);
  return *internal_default_instance();
}


void Open_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expect.Open.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    condition_value_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&condition_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&op_) -
        reinterpret_cast<char*>(&condition_key_)) + sizeof(op_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Open_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Open.Condition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 condition_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_condition_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes condition_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_condition_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expect::Open_Condition_ConditionOperation_IsValid(value)) {
            set_op(static_cast< ::Mysqlx::Expect::Open_Condition_ConditionOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Open.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Open.Condition)
  return false;
#undef DO_
}

void Open_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Open.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 condition_key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->condition_key(), output);
  }

  // optional bytes condition_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->condition_value(), output);
  }

  // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Open.Condition)
}

::google::protobuf::uint8* Open_Condition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Open.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 condition_key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->condition_key(), target);
  }

  // optional bytes condition_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->condition_value(), target);
  }

  // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Open.Condition)
  return target;
}

size_t Open_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expect.Open.Condition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 condition_key = 1;
  if (has_condition_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->condition_key());
  }
  // optional bytes condition_value = 2;
  if (has_condition_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->condition_value());
  }

  // optional .Mysqlx.Expect.Open.Condition.ConditionOperation op = 3 [default = EXPECT_OP_SET];
  if (has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open_Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expect.Open.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Open_Condition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Open_Condition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expect.Open.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expect.Open.Condition)
    MergeFrom(*source);
  }
}

void Open_Condition::MergeFrom(const Open_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expect.Open.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_condition_value();
      condition_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.condition_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      condition_key_ = from.condition_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      op_ = from.op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Open_Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expect.Open.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Open_Condition::CopyFrom(const Open_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expect.Open.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Open_Condition::Swap(Open_Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Open_Condition::InternalSwap(Open_Condition* other) {
  using std::swap;
  condition_value_.Swap(&other->condition_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(condition_key_, other->condition_key_);
  swap(op_, other->op_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Open_Condition::GetMetadata() const {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Open::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Open::kOpFieldNumber;
const int Open::kCondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Open::Open()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpect_2eproto::scc_info_Open.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Open)
}
Open::Open(const Open& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cond_(from.cond_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Open)
}

void Open::SharedCtor() {
  op_ = 0;
}

Open::~Open() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Open)
  SharedDtor();
}

void Open::SharedDtor() {
}

void Open::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Open::descriptor() {
  ::protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Open& Open::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpect_2eproto::scc_info_Open.base);
  return *internal_default_instance();
}


void Open::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expect.Open)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cond_.Clear();
  op_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Open)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Expect::Open_CtxOperation_IsValid(value)) {
            set_op(static_cast< ::Mysqlx::Expect::Open_CtxOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Expect.Open.Condition cond = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Open)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Open)
  return false;
#undef DO_
}

void Open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Open)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cond_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cond(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Open)
}

::google::protobuf::uint8* Open::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Open)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cond_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cond(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Open)
  return target;
}

size_t Open::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expect.Open)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Mysqlx.Expect.Open.Condition cond = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cond_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cond(static_cast<int>(i)));
    }
  }

  // optional .Mysqlx.Expect.Open.CtxOperation op = 1 [default = EXPECT_CTX_COPY_PREV];
  if (has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expect.Open)
  GOOGLE_DCHECK_NE(&from, this);
  const Open* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Open>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expect.Open)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expect.Open)
    MergeFrom(*source);
  }
}

void Open::MergeFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expect.Open)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cond_.MergeFrom(from.cond_);
  if (from.has_op()) {
    set_op(from.op());
  }
}

void Open::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expect.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Open::CopyFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expect.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->cond())) return false;
  return true;
}

void Open::Swap(Open* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Open::InternalSwap(Open* other) {
  using std::swap;
  CastToBase(&cond_)->InternalSwap(CastToBase(&other->cond_));
  swap(op_, other->op_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Open::GetMetadata() const {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Close::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Close::Close()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fexpect_2eproto::scc_info_Close.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Expect.Close)
}
Close::Close(const Close& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Expect.Close)
}

void Close::SharedCtor() {
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Expect.Close)
  SharedDtor();
}

void Close::SharedDtor() {
}

void Close::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  ::protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Close& Close::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fexpect_2eproto::scc_info_Close.base);
  return *internal_default_instance();
}


void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Expect.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Expect.Close)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Expect.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Expect.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Expect.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Expect.Close)
}

::google::protobuf::uint8* Close::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Expect.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Expect.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Expect.Close)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Expect.Close)
  GOOGLE_DCHECK_NE(&from, this);
  const Close* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Close>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Expect.Close)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Expect.Close)
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Expect.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Expect.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Expect.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::Swap(Close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Close::InternalSwap(Close* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_mysqlx_5fexpect_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fexpect_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Expect
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expect::Open_Condition* Arena::CreateMaybeMessage< ::Mysqlx::Expect::Open_Condition >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expect::Open_Condition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expect::Open* Arena::CreateMaybeMessage< ::Mysqlx::Expect::Open >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expect::Open >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Expect::Close* Arena::CreateMaybeMessage< ::Mysqlx::Expect::Close >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Expect::Close >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
