// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_prepare.proto

#include "mysqlx_prepare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mysqlx_5fcrud_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fcrud_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Insert;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fcrud_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Delete;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fcrud_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Find;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fcrud_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Update;
}  // namespace protobuf_mysqlx_5fcrud_2eproto
namespace protobuf_mysqlx_5fdatatypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fdatatypes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Any;
}  // namespace protobuf_mysqlx_5fdatatypes_2eproto
namespace protobuf_mysqlx_5fprepare_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fprepare_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Prepare_OneOfMessage;
}  // namespace protobuf_mysqlx_5fprepare_2eproto
namespace protobuf_mysqlx_5fsql_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fsql_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StmtExecute;
}  // namespace protobuf_mysqlx_5fsql_2eproto
namespace Mysqlx {
namespace Prepare {
class Prepare_OneOfMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Prepare_OneOfMessage>
      _instance;
} _Prepare_OneOfMessage_default_instance_;
class PrepareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Prepare>
      _instance;
} _Prepare_default_instance_;
class ExecuteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Execute>
      _instance;
} _Execute_default_instance_;
class DeallocateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Deallocate>
      _instance;
} _Deallocate_default_instance_;
}  // namespace Prepare
}  // namespace Mysqlx
namespace protobuf_mysqlx_5fprepare_2eproto {
static void InitDefaultsPrepare_OneOfMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_;
    new (ptr) ::Mysqlx::Prepare::Prepare_OneOfMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Prepare::Prepare_OneOfMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Prepare_OneOfMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPrepare_OneOfMessage}, {
      &protobuf_mysqlx_5fcrud_2eproto::scc_info_Find.base,
      &protobuf_mysqlx_5fcrud_2eproto::scc_info_Insert.base,
      &protobuf_mysqlx_5fcrud_2eproto::scc_info_Update.base,
      &protobuf_mysqlx_5fcrud_2eproto::scc_info_Delete.base,
      &protobuf_mysqlx_5fsql_2eproto::scc_info_StmtExecute.base,}};

static void InitDefaultsPrepare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Prepare::_Prepare_default_instance_;
    new (ptr) ::Mysqlx::Prepare::Prepare();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Prepare::Prepare::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Prepare =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrepare}, {
      &protobuf_mysqlx_5fprepare_2eproto::scc_info_Prepare_OneOfMessage.base,}};

static void InitDefaultsExecute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Prepare::_Execute_default_instance_;
    new (ptr) ::Mysqlx::Prepare::Execute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Prepare::Execute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Execute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecute}, {
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base,}};

static void InitDefaultsDeallocate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Prepare::_Deallocate_default_instance_;
    new (ptr) ::Mysqlx::Prepare::Deallocate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Prepare::Deallocate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Deallocate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeallocate}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Prepare_OneOfMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Prepare.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Execute.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Deallocate.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare_OneOfMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare_OneOfMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare_OneOfMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare_OneOfMessage, find_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare_OneOfMessage, insert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare_OneOfMessage, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare_OneOfMessage, delete__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare_OneOfMessage, stmt_execute_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare, stmt_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Prepare, stmt_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Execute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Execute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Execute, stmt_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Execute, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Execute, compact_metadata_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Deallocate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Deallocate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mysqlx::Prepare::Deallocate, stmt_id_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::Mysqlx::Prepare::Prepare_OneOfMessage)},
  { 17, 24, sizeof(::Mysqlx::Prepare::Prepare)},
  { 26, 34, sizeof(::Mysqlx::Prepare::Execute)},
  { 37, 43, sizeof(::Mysqlx::Prepare::Deallocate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Prepare::_Prepare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Prepare::_Execute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Mysqlx::Prepare::_Deallocate_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mysqlx_prepare.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024mysqlx_prepare.proto\022\016Mysqlx.Prepare\032\014"
      "mysqlx.proto\032\020mysqlx_sql.proto\032\021mysqlx_c"
      "rud.proto\032\026mysqlx_datatypes.proto\"\235\003\n\007Pr"
      "epare\022\017\n\007stmt_id\030\001 \002(\r\0222\n\004stmt\030\002 \002(\0132$.M"
      "ysqlx.Prepare.Prepare.OneOfMessage\032\306\002\n\014O"
      "neOfMessage\0227\n\004type\030\001 \002(\0162).Mysqlx.Prepa"
      "re.Prepare.OneOfMessage.Type\022\037\n\004find\030\002 \001"
      "(\0132\021.Mysqlx.Crud.Find\022#\n\006insert\030\003 \001(\0132\023."
      "Mysqlx.Crud.Insert\022#\n\006update\030\004 \001(\0132\023.Mys"
      "qlx.Crud.Update\022#\n\006delete\030\005 \001(\0132\023.Mysqlx"
      ".Crud.Delete\022-\n\014stmt_execute\030\006 \001(\0132\027.Mys"
      "qlx.Sql.StmtExecute\">\n\004Type\022\010\n\004FIND\020\000\022\n\n"
      "\006INSERT\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DELETE\020\004\022\010\n\004STM"
      "T\020\005:\004\210\3520(\"f\n\007Execute\022\017\n\007stmt_id\030\001 \002(\r\022#\n"
      "\004args\030\002 \003(\0132\025.Mysqlx.Datatypes.Any\022\037\n\020co"
      "mpact_metadata\030\003 \001(\010:\005false:\004\210\3520)\"#\n\nDea"
      "llocate\022\017\n\007stmt_id\030\001 \002(\r:\004\210\3520*B\031\n\027com.my"
      "sql.cj.x.protobuf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 697);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_prepare.proto", &protobuf_RegisterTypes);
  ::protobuf_mysqlx_2eproto::AddDescriptors();
  ::protobuf_mysqlx_5fsql_2eproto::AddDescriptors();
  ::protobuf_mysqlx_5fcrud_2eproto::AddDescriptors();
  ::protobuf_mysqlx_5fdatatypes_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mysqlx_5fprepare_2eproto
namespace Mysqlx {
namespace Prepare {
const ::google::protobuf::EnumDescriptor* Prepare_OneOfMessage_Type_descriptor() {
  protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mysqlx_5fprepare_2eproto::file_level_enum_descriptors[0];
}
bool Prepare_OneOfMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Prepare_OneOfMessage_Type Prepare_OneOfMessage::FIND;
const Prepare_OneOfMessage_Type Prepare_OneOfMessage::INSERT;
const Prepare_OneOfMessage_Type Prepare_OneOfMessage::UPDATE;
const Prepare_OneOfMessage_Type Prepare_OneOfMessage::DELETE;
const Prepare_OneOfMessage_Type Prepare_OneOfMessage::STMT;
const Prepare_OneOfMessage_Type Prepare_OneOfMessage::Type_MIN;
const Prepare_OneOfMessage_Type Prepare_OneOfMessage::Type_MAX;
const int Prepare_OneOfMessage::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Prepare_OneOfMessage::InitAsDefaultInstance() {
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->find_ = const_cast< ::Mysqlx::Crud::Find*>(
      ::Mysqlx::Crud::Find::internal_default_instance());
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->insert_ = const_cast< ::Mysqlx::Crud::Insert*>(
      ::Mysqlx::Crud::Insert::internal_default_instance());
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->update_ = const_cast< ::Mysqlx::Crud::Update*>(
      ::Mysqlx::Crud::Update::internal_default_instance());
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->delete__ = const_cast< ::Mysqlx::Crud::Delete*>(
      ::Mysqlx::Crud::Delete::internal_default_instance());
  ::Mysqlx::Prepare::_Prepare_OneOfMessage_default_instance_._instance.get_mutable()->stmt_execute_ = const_cast< ::Mysqlx::Sql::StmtExecute*>(
      ::Mysqlx::Sql::StmtExecute::internal_default_instance());
}
void Prepare_OneOfMessage::clear_find() {
  if (find_ != NULL) find_->Clear();
  clear_has_find();
}
void Prepare_OneOfMessage::clear_insert() {
  if (insert_ != NULL) insert_->Clear();
  clear_has_insert();
}
void Prepare_OneOfMessage::clear_update() {
  if (update_ != NULL) update_->Clear();
  clear_has_update();
}
void Prepare_OneOfMessage::clear_delete_() {
  if (delete__ != NULL) delete__->Clear();
  clear_has_delete_();
}
void Prepare_OneOfMessage::clear_stmt_execute() {
  if (stmt_execute_ != NULL) stmt_execute_->Clear();
  clear_has_stmt_execute();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Prepare_OneOfMessage::kTypeFieldNumber;
const int Prepare_OneOfMessage::kFindFieldNumber;
const int Prepare_OneOfMessage::kInsertFieldNumber;
const int Prepare_OneOfMessage::kUpdateFieldNumber;
const int Prepare_OneOfMessage::kDeleteFieldNumber;
const int Prepare_OneOfMessage::kStmtExecuteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Prepare_OneOfMessage::Prepare_OneOfMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fprepare_2eproto::scc_info_Prepare_OneOfMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Prepare.Prepare.OneOfMessage)
}
Prepare_OneOfMessage::Prepare_OneOfMessage(const Prepare_OneOfMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_find()) {
    find_ = new ::Mysqlx::Crud::Find(*from.find_);
  } else {
    find_ = NULL;
  }
  if (from.has_insert()) {
    insert_ = new ::Mysqlx::Crud::Insert(*from.insert_);
  } else {
    insert_ = NULL;
  }
  if (from.has_update()) {
    update_ = new ::Mysqlx::Crud::Update(*from.update_);
  } else {
    update_ = NULL;
  }
  if (from.has_delete_()) {
    delete__ = new ::Mysqlx::Crud::Delete(*from.delete__);
  } else {
    delete__ = NULL;
  }
  if (from.has_stmt_execute()) {
    stmt_execute_ = new ::Mysqlx::Sql::StmtExecute(*from.stmt_execute_);
  } else {
    stmt_execute_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Prepare.Prepare.OneOfMessage)
}

void Prepare_OneOfMessage::SharedCtor() {
  ::memset(&find_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&find_)) + sizeof(type_));
}

Prepare_OneOfMessage::~Prepare_OneOfMessage() {
  // @@protoc_insertion_point(destructor:Mysqlx.Prepare.Prepare.OneOfMessage)
  SharedDtor();
}

void Prepare_OneOfMessage::SharedDtor() {
  if (this != internal_default_instance()) delete find_;
  if (this != internal_default_instance()) delete insert_;
  if (this != internal_default_instance()) delete update_;
  if (this != internal_default_instance()) delete delete__;
  if (this != internal_default_instance()) delete stmt_execute_;
}

void Prepare_OneOfMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Prepare_OneOfMessage::descriptor() {
  ::protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fprepare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Prepare_OneOfMessage& Prepare_OneOfMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fprepare_2eproto::scc_info_Prepare_OneOfMessage.base);
  return *internal_default_instance();
}


void Prepare_OneOfMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(find_ != NULL);
      find_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(insert_ != NULL);
      insert_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(update_ != NULL);
      update_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(delete__ != NULL);
      delete__->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stmt_execute_ != NULL);
      stmt_execute_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Prepare_OneOfMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Prepare::Prepare_OneOfMessage_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Prepare::Prepare_OneOfMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Crud.Find find = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_find()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Crud.Insert insert = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_insert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Crud.Update update = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Crud.Delete delete = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stmt_execute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Prepare.Prepare.OneOfMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Prepare.Prepare.OneOfMessage)
  return false;
#undef DO_
}

void Prepare_OneOfMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Crud.Find find = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_find(), output);
  }

  // optional .Mysqlx.Crud.Insert insert = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_insert(), output);
  }

  // optional .Mysqlx.Crud.Update update = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_update(), output);
  }

  // optional .Mysqlx.Crud.Delete delete = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_delete_(), output);
  }

  // optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_stmt_execute(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Prepare.Prepare.OneOfMessage)
}

::google::protobuf::uint8* Prepare_OneOfMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Mysqlx.Crud.Find find = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_find(), deterministic, target);
  }

  // optional .Mysqlx.Crud.Insert insert = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_insert(), deterministic, target);
  }

  // optional .Mysqlx.Crud.Update update = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_update(), deterministic, target);
  }

  // optional .Mysqlx.Crud.Delete delete = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_delete_(), deterministic, target);
  }

  // optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_stmt_execute(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Prepare.Prepare.OneOfMessage)
  return target;
}

size_t Prepare_OneOfMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Mysqlx.Prepare.Prepare.OneOfMessage.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .Mysqlx.Crud.Find find = 2;
    if (has_find()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *find_);
    }

    // optional .Mysqlx.Crud.Insert insert = 3;
    if (has_insert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *insert_);
    }

    // optional .Mysqlx.Crud.Update update = 4;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_);
    }

    // optional .Mysqlx.Crud.Delete delete = 5;
    if (has_delete_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *delete__);
    }

    // optional .Mysqlx.Sql.StmtExecute stmt_execute = 6;
    if (has_stmt_execute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stmt_execute_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prepare_OneOfMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Prepare_OneOfMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Prepare_OneOfMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Prepare.Prepare.OneOfMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Prepare.Prepare.OneOfMessage)
    MergeFrom(*source);
  }
}

void Prepare_OneOfMessage::MergeFrom(const Prepare_OneOfMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_find()->::Mysqlx::Crud::Find::MergeFrom(from.find());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_insert()->::Mysqlx::Crud::Insert::MergeFrom(from.insert());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_update()->::Mysqlx::Crud::Update::MergeFrom(from.update());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_delete_()->::Mysqlx::Crud::Delete::MergeFrom(from.delete_());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stmt_execute()->::Mysqlx::Sql::StmtExecute::MergeFrom(from.stmt_execute());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Prepare_OneOfMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prepare_OneOfMessage::CopyFrom(const Prepare_OneOfMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Prepare.Prepare.OneOfMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prepare_OneOfMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (has_find()) {
    if (!this->find_->IsInitialized()) return false;
  }
  if (has_insert()) {
    if (!this->insert_->IsInitialized()) return false;
  }
  if (has_update()) {
    if (!this->update_->IsInitialized()) return false;
  }
  if (has_delete_()) {
    if (!this->delete__->IsInitialized()) return false;
  }
  if (has_stmt_execute()) {
    if (!this->stmt_execute_->IsInitialized()) return false;
  }
  return true;
}

void Prepare_OneOfMessage::Swap(Prepare_OneOfMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Prepare_OneOfMessage::InternalSwap(Prepare_OneOfMessage* other) {
  using std::swap;
  swap(find_, other->find_);
  swap(insert_, other->insert_);
  swap(update_, other->update_);
  swap(delete__, other->delete__);
  swap(stmt_execute_, other->stmt_execute_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Prepare_OneOfMessage::GetMetadata() const {
  protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fprepare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Prepare::InitAsDefaultInstance() {
  ::Mysqlx::Prepare::_Prepare_default_instance_._instance.get_mutable()->stmt_ = const_cast< ::Mysqlx::Prepare::Prepare_OneOfMessage*>(
      ::Mysqlx::Prepare::Prepare_OneOfMessage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Prepare::kStmtIdFieldNumber;
const int Prepare::kStmtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Prepare::Prepare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fprepare_2eproto::scc_info_Prepare.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Prepare.Prepare)
}
Prepare::Prepare(const Prepare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stmt()) {
    stmt_ = new ::Mysqlx::Prepare::Prepare_OneOfMessage(*from.stmt_);
  } else {
    stmt_ = NULL;
  }
  stmt_id_ = from.stmt_id_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Prepare.Prepare)
}

void Prepare::SharedCtor() {
  ::memset(&stmt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stmt_id_) -
      reinterpret_cast<char*>(&stmt_)) + sizeof(stmt_id_));
}

Prepare::~Prepare() {
  // @@protoc_insertion_point(destructor:Mysqlx.Prepare.Prepare)
  SharedDtor();
}

void Prepare::SharedDtor() {
  if (this != internal_default_instance()) delete stmt_;
}

void Prepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Prepare::descriptor() {
  ::protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fprepare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Prepare& Prepare::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fprepare_2eproto::scc_info_Prepare.base);
  return *internal_default_instance();
}


void Prepare::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Prepare.Prepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stmt_ != NULL);
    stmt_->Clear();
  }
  stmt_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Prepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Prepare.Prepare)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stmt_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stmt_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stmt_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stmt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Prepare.Prepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Prepare.Prepare)
  return false;
#undef DO_
}

void Prepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Prepare.Prepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stmt_id(), output);
  }

  // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_stmt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Prepare.Prepare)
}

::google::protobuf::uint8* Prepare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Prepare.Prepare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stmt_id(), target);
  }

  // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_stmt(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Prepare.Prepare)
  return target;
}

size_t Prepare::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Prepare.Prepare)
  size_t total_size = 0;

  if (has_stmt()) {
    // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stmt_);
  }

  if (has_stmt_id()) {
    // required uint32 stmt_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stmt_id());
  }

  return total_size;
}
size_t Prepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Prepare.Prepare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Mysqlx.Prepare.Prepare.OneOfMessage stmt = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stmt_);

    // required uint32 stmt_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stmt_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prepare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Prepare.Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  const Prepare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Prepare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Prepare.Prepare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Prepare.Prepare)
    MergeFrom(*source);
  }
}

void Prepare::MergeFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Prepare.Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stmt()->::Mysqlx::Prepare::Prepare_OneOfMessage::MergeFrom(from.stmt());
    }
    if (cached_has_bits & 0x00000002u) {
      stmt_id_ = from.stmt_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Prepare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Prepare.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prepare::CopyFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Prepare.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_stmt()) {
    if (!this->stmt_->IsInitialized()) return false;
  }
  return true;
}

void Prepare::Swap(Prepare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Prepare::InternalSwap(Prepare* other) {
  using std::swap;
  swap(stmt_, other->stmt_);
  swap(stmt_id_, other->stmt_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Prepare::GetMetadata() const {
  protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fprepare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Execute::InitAsDefaultInstance() {
}
void Execute::clear_args() {
  args_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Execute::kStmtIdFieldNumber;
const int Execute::kArgsFieldNumber;
const int Execute::kCompactMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Execute::Execute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fprepare_2eproto::scc_info_Execute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Prepare.Execute)
}
Execute::Execute(const Execute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stmt_id_, &from.stmt_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&compact_metadata_) -
    reinterpret_cast<char*>(&stmt_id_)) + sizeof(compact_metadata_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Prepare.Execute)
}

void Execute::SharedCtor() {
  ::memset(&stmt_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compact_metadata_) -
      reinterpret_cast<char*>(&stmt_id_)) + sizeof(compact_metadata_));
}

Execute::~Execute() {
  // @@protoc_insertion_point(destructor:Mysqlx.Prepare.Execute)
  SharedDtor();
}

void Execute::SharedDtor() {
}

void Execute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Execute::descriptor() {
  ::protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fprepare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Execute& Execute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fprepare_2eproto::scc_info_Execute.base);
  return *internal_default_instance();
}


void Execute::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Prepare.Execute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&stmt_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compact_metadata_) -
        reinterpret_cast<char*>(&stmt_id_)) + sizeof(compact_metadata_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Execute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Prepare.Execute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stmt_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stmt_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stmt_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Datatypes.Any args = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compact_metadata = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_compact_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compact_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Prepare.Execute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Prepare.Execute)
  return false;
#undef DO_
}

void Execute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Prepare.Execute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stmt_id(), output);
  }

  // repeated .Mysqlx.Datatypes.Any args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->args(static_cast<int>(i)),
      output);
  }

  // optional bool compact_metadata = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->compact_metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Prepare.Execute)
}

::google::protobuf::uint8* Execute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Prepare.Execute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stmt_id(), target);
  }

  // repeated .Mysqlx.Datatypes.Any args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->args(static_cast<int>(i)), deterministic, target);
  }

  // optional bool compact_metadata = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->compact_metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Prepare.Execute)
  return target;
}

size_t Execute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Prepare.Execute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 stmt_id = 1;
  if (has_stmt_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stmt_id());
  }
  // repeated .Mysqlx.Datatypes.Any args = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->args(static_cast<int>(i)));
    }
  }

  // optional bool compact_metadata = 3 [default = false];
  if (has_compact_metadata()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Execute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Prepare.Execute)
  GOOGLE_DCHECK_NE(&from, this);
  const Execute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Execute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Prepare.Execute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Prepare.Execute)
    MergeFrom(*source);
  }
}

void Execute::MergeFrom(const Execute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Prepare.Execute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stmt_id_ = from.stmt_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      compact_metadata_ = from.compact_metadata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Execute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Prepare.Execute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Execute::CopyFrom(const Execute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Prepare.Execute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->args())) return false;
  return true;
}

void Execute::Swap(Execute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Execute::InternalSwap(Execute* other) {
  using std::swap;
  CastToBase(&args_)->InternalSwap(CastToBase(&other->args_));
  swap(stmt_id_, other->stmt_id_);
  swap(compact_metadata_, other->compact_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Execute::GetMetadata() const {
  protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fprepare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Deallocate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deallocate::kStmtIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deallocate::Deallocate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fprepare_2eproto::scc_info_Deallocate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Prepare.Deallocate)
}
Deallocate::Deallocate(const Deallocate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stmt_id_ = from.stmt_id_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Prepare.Deallocate)
}

void Deallocate::SharedCtor() {
  stmt_id_ = 0u;
}

Deallocate::~Deallocate() {
  // @@protoc_insertion_point(destructor:Mysqlx.Prepare.Deallocate)
  SharedDtor();
}

void Deallocate::SharedDtor() {
}

void Deallocate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Deallocate::descriptor() {
  ::protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fprepare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Deallocate& Deallocate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fprepare_2eproto::scc_info_Deallocate.base);
  return *internal_default_instance();
}


void Deallocate::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Prepare.Deallocate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stmt_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Deallocate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mysqlx.Prepare.Deallocate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stmt_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_stmt_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stmt_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Prepare.Deallocate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Prepare.Deallocate)
  return false;
#undef DO_
}

void Deallocate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Prepare.Deallocate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stmt_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mysqlx.Prepare.Deallocate)
}

::google::protobuf::uint8* Deallocate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mysqlx.Prepare.Deallocate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 stmt_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stmt_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mysqlx.Prepare.Deallocate)
  return target;
}

size_t Deallocate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Prepare.Deallocate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 stmt_id = 1;
  if (has_stmt_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stmt_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deallocate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mysqlx.Prepare.Deallocate)
  GOOGLE_DCHECK_NE(&from, this);
  const Deallocate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Deallocate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mysqlx.Prepare.Deallocate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mysqlx.Prepare.Deallocate)
    MergeFrom(*source);
  }
}

void Deallocate::MergeFrom(const Deallocate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Prepare.Deallocate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stmt_id()) {
    set_stmt_id(from.stmt_id());
  }
}

void Deallocate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mysqlx.Prepare.Deallocate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deallocate::CopyFrom(const Deallocate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Prepare.Deallocate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deallocate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Deallocate::Swap(Deallocate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deallocate::InternalSwap(Deallocate* other) {
  using std::swap;
  swap(stmt_id_, other->stmt_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Deallocate::GetMetadata() const {
  protobuf_mysqlx_5fprepare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mysqlx_5fprepare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Prepare
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Prepare::Prepare_OneOfMessage* Arena::CreateMaybeMessage< ::Mysqlx::Prepare::Prepare_OneOfMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Prepare::Prepare_OneOfMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Prepare::Prepare* Arena::CreateMaybeMessage< ::Mysqlx::Prepare::Prepare >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Prepare::Prepare >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Prepare::Execute* Arena::CreateMaybeMessage< ::Mysqlx::Prepare::Execute >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Prepare::Execute >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Prepare::Deallocate* Arena::CreateMaybeMessage< ::Mysqlx::Prepare::Deallocate >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Prepare::Deallocate >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
