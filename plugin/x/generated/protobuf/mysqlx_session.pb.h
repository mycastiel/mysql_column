// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_session.proto

#ifndef PROTOBUF_INCLUDED_mysqlx_5fsession_2eproto
#define PROTOBUF_INCLUDED_mysqlx_5fsession_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mysqlx.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fsession_2eproto 

namespace protobuf_mysqlx_5fsession_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mysqlx_5fsession_2eproto
namespace Mysqlx {
namespace Session {
class AuthenticateContinue;
class AuthenticateContinueDefaultTypeInternal;
extern AuthenticateContinueDefaultTypeInternal _AuthenticateContinue_default_instance_;
class AuthenticateOk;
class AuthenticateOkDefaultTypeInternal;
extern AuthenticateOkDefaultTypeInternal _AuthenticateOk_default_instance_;
class AuthenticateStart;
class AuthenticateStartDefaultTypeInternal;
extern AuthenticateStartDefaultTypeInternal _AuthenticateStart_default_instance_;
class Close;
class CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class Reset;
class ResetDefaultTypeInternal;
extern ResetDefaultTypeInternal _Reset_default_instance_;
}  // namespace Session
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> ::Mysqlx::Session::AuthenticateContinue* Arena::CreateMaybeMessage<::Mysqlx::Session::AuthenticateContinue>(Arena*);
template<> ::Mysqlx::Session::AuthenticateOk* Arena::CreateMaybeMessage<::Mysqlx::Session::AuthenticateOk>(Arena*);
template<> ::Mysqlx::Session::AuthenticateStart* Arena::CreateMaybeMessage<::Mysqlx::Session::AuthenticateStart>(Arena*);
template<> ::Mysqlx::Session::Close* Arena::CreateMaybeMessage<::Mysqlx::Session::Close>(Arena*);
template<> ::Mysqlx::Session::Reset* Arena::CreateMaybeMessage<::Mysqlx::Session::Reset>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Mysqlx {
namespace Session {

// ===================================================================

class AuthenticateStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Session.AuthenticateStart) */ {
 public:
  AuthenticateStart();
  virtual ~AuthenticateStart();

  AuthenticateStart(const AuthenticateStart& from);

  inline AuthenticateStart& operator=(const AuthenticateStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthenticateStart(AuthenticateStart&& from) noexcept
    : AuthenticateStart() {
    *this = ::std::move(from);
  }

  inline AuthenticateStart& operator=(AuthenticateStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateStart* internal_default_instance() {
    return reinterpret_cast<const AuthenticateStart*>(
               &_AuthenticateStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AuthenticateStart* other);
  friend void swap(AuthenticateStart& a, AuthenticateStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateStart* New() const final {
    return CreateMaybeMessage<AuthenticateStart>(NULL);
  }

  AuthenticateStart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateStart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthenticateStart& from);
  void MergeFrom(const AuthenticateStart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string mech_name = 1;
  bool has_mech_name() const;
  void clear_mech_name();
  static const int kMechNameFieldNumber = 1;
  const ::std::string& mech_name() const;
  void set_mech_name(const ::std::string& value);
  #if LANG_CXX11
  void set_mech_name(::std::string&& value);
  #endif
  void set_mech_name(const char* value);
  void set_mech_name(const char* value, size_t size);
  ::std::string* mutable_mech_name();
  ::std::string* release_mech_name();
  void set_allocated_mech_name(::std::string* mech_name);

  // optional bytes auth_data = 2;
  bool has_auth_data() const;
  void clear_auth_data();
  static const int kAuthDataFieldNumber = 2;
  const ::std::string& auth_data() const;
  void set_auth_data(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_data(::std::string&& value);
  #endif
  void set_auth_data(const char* value);
  void set_auth_data(const void* value, size_t size);
  ::std::string* mutable_auth_data();
  ::std::string* release_auth_data();
  void set_allocated_auth_data(::std::string* auth_data);

  // optional bytes initial_response = 3;
  bool has_initial_response() const;
  void clear_initial_response();
  static const int kInitialResponseFieldNumber = 3;
  const ::std::string& initial_response() const;
  void set_initial_response(const ::std::string& value);
  #if LANG_CXX11
  void set_initial_response(::std::string&& value);
  #endif
  void set_initial_response(const char* value);
  void set_initial_response(const void* value, size_t size);
  ::std::string* mutable_initial_response();
  ::std::string* release_initial_response();
  void set_allocated_initial_response(::std::string* initial_response);

  // @@protoc_insertion_point(class_scope:Mysqlx.Session.AuthenticateStart)
 private:
  void set_has_mech_name();
  void clear_has_mech_name();
  void set_has_auth_data();
  void clear_has_auth_data();
  void set_has_initial_response();
  void clear_has_initial_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mech_name_;
  ::google::protobuf::internal::ArenaStringPtr auth_data_;
  ::google::protobuf::internal::ArenaStringPtr initial_response_;
  friend struct ::protobuf_mysqlx_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthenticateContinue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Session.AuthenticateContinue) */ {
 public:
  AuthenticateContinue();
  virtual ~AuthenticateContinue();

  AuthenticateContinue(const AuthenticateContinue& from);

  inline AuthenticateContinue& operator=(const AuthenticateContinue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthenticateContinue(AuthenticateContinue&& from) noexcept
    : AuthenticateContinue() {
    *this = ::std::move(from);
  }

  inline AuthenticateContinue& operator=(AuthenticateContinue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateContinue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateContinue* internal_default_instance() {
    return reinterpret_cast<const AuthenticateContinue*>(
               &_AuthenticateContinue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthenticateContinue* other);
  friend void swap(AuthenticateContinue& a, AuthenticateContinue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateContinue* New() const final {
    return CreateMaybeMessage<AuthenticateContinue>(NULL);
  }

  AuthenticateContinue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateContinue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthenticateContinue& from);
  void MergeFrom(const AuthenticateContinue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateContinue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes auth_data = 1;
  bool has_auth_data() const;
  void clear_auth_data();
  static const int kAuthDataFieldNumber = 1;
  const ::std::string& auth_data() const;
  void set_auth_data(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_data(::std::string&& value);
  #endif
  void set_auth_data(const char* value);
  void set_auth_data(const void* value, size_t size);
  ::std::string* mutable_auth_data();
  ::std::string* release_auth_data();
  void set_allocated_auth_data(::std::string* auth_data);

  // @@protoc_insertion_point(class_scope:Mysqlx.Session.AuthenticateContinue)
 private:
  void set_has_auth_data();
  void clear_has_auth_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr auth_data_;
  friend struct ::protobuf_mysqlx_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthenticateOk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Session.AuthenticateOk) */ {
 public:
  AuthenticateOk();
  virtual ~AuthenticateOk();

  AuthenticateOk(const AuthenticateOk& from);

  inline AuthenticateOk& operator=(const AuthenticateOk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthenticateOk(AuthenticateOk&& from) noexcept
    : AuthenticateOk() {
    *this = ::std::move(from);
  }

  inline AuthenticateOk& operator=(AuthenticateOk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateOk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateOk* internal_default_instance() {
    return reinterpret_cast<const AuthenticateOk*>(
               &_AuthenticateOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AuthenticateOk* other);
  friend void swap(AuthenticateOk& a, AuthenticateOk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateOk* New() const final {
    return CreateMaybeMessage<AuthenticateOk>(NULL);
  }

  AuthenticateOk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateOk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthenticateOk& from);
  void MergeFrom(const AuthenticateOk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateOk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes auth_data = 1;
  bool has_auth_data() const;
  void clear_auth_data();
  static const int kAuthDataFieldNumber = 1;
  const ::std::string& auth_data() const;
  void set_auth_data(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_data(::std::string&& value);
  #endif
  void set_auth_data(const char* value);
  void set_auth_data(const void* value, size_t size);
  ::std::string* mutable_auth_data();
  ::std::string* release_auth_data();
  void set_allocated_auth_data(::std::string* auth_data);

  // @@protoc_insertion_point(class_scope:Mysqlx.Session.AuthenticateOk)
 private:
  void set_has_auth_data();
  void clear_has_auth_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr auth_data_;
  friend struct ::protobuf_mysqlx_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Session.Reset) */ {
 public:
  Reset();
  virtual ~Reset();

  Reset(const Reset& from);

  inline Reset& operator=(const Reset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reset(Reset&& from) noexcept
    : Reset() {
    *this = ::std::move(from);
  }

  inline Reset& operator=(Reset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reset* internal_default_instance() {
    return reinterpret_cast<const Reset*>(
               &_Reset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Reset* other);
  friend void swap(Reset& a, Reset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reset* New() const final {
    return CreateMaybeMessage<Reset>(NULL);
  }

  Reset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reset& from);
  void MergeFrom(const Reset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool keep_open = 1 [default = false];
  bool has_keep_open() const;
  void clear_keep_open();
  static const int kKeepOpenFieldNumber = 1;
  bool keep_open() const;
  void set_keep_open(bool value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Session.Reset)
 private:
  void set_has_keep_open();
  void clear_has_keep_open();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool keep_open_;
  friend struct ::protobuf_mysqlx_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Close : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mysqlx.Session.Close) */ {
 public:
  Close();
  virtual ~Close();

  Close(const Close& from);

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(Close&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Close& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Close* other);
  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Close* New() const final {
    return CreateMaybeMessage<Close>(NULL);
  }

  Close* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Close* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Session.Close)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mysqlx_5fsession_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticateStart

// required string mech_name = 1;
inline bool AuthenticateStart::has_mech_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticateStart::set_has_mech_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthenticateStart::clear_has_mech_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthenticateStart::clear_mech_name() {
  mech_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mech_name();
}
inline const ::std::string& AuthenticateStart::mech_name() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateStart.mech_name)
  return mech_name_.GetNoArena();
}
inline void AuthenticateStart::set_mech_name(const ::std::string& value) {
  set_has_mech_name();
  mech_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateStart.mech_name)
}
#if LANG_CXX11
inline void AuthenticateStart::set_mech_name(::std::string&& value) {
  set_has_mech_name();
  mech_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateStart.mech_name)
}
#endif
inline void AuthenticateStart::set_mech_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mech_name();
  mech_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateStart.mech_name)
}
inline void AuthenticateStart::set_mech_name(const char* value, size_t size) {
  set_has_mech_name();
  mech_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateStart.mech_name)
}
inline ::std::string* AuthenticateStart::mutable_mech_name() {
  set_has_mech_name();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateStart.mech_name)
  return mech_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateStart::release_mech_name() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateStart.mech_name)
  if (!has_mech_name()) {
    return NULL;
  }
  clear_has_mech_name();
  return mech_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateStart::set_allocated_mech_name(::std::string* mech_name) {
  if (mech_name != NULL) {
    set_has_mech_name();
  } else {
    clear_has_mech_name();
  }
  mech_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mech_name);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateStart.mech_name)
}

// optional bytes auth_data = 2;
inline bool AuthenticateStart::has_auth_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthenticateStart::set_has_auth_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthenticateStart::clear_has_auth_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthenticateStart::clear_auth_data() {
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_data();
}
inline const ::std::string& AuthenticateStart::auth_data() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateStart.auth_data)
  return auth_data_.GetNoArena();
}
inline void AuthenticateStart::set_auth_data(const ::std::string& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateStart.auth_data)
}
#if LANG_CXX11
inline void AuthenticateStart::set_auth_data(::std::string&& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateStart.auth_data)
}
#endif
inline void AuthenticateStart::set_auth_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateStart.auth_data)
}
inline void AuthenticateStart::set_auth_data(const void* value, size_t size) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateStart.auth_data)
}
inline ::std::string* AuthenticateStart::mutable_auth_data() {
  set_has_auth_data();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateStart.auth_data)
  return auth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateStart::release_auth_data() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateStart.auth_data)
  if (!has_auth_data()) {
    return NULL;
  }
  clear_has_auth_data();
  return auth_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateStart::set_allocated_auth_data(::std::string* auth_data) {
  if (auth_data != NULL) {
    set_has_auth_data();
  } else {
    clear_has_auth_data();
  }
  auth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_data);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateStart.auth_data)
}

// optional bytes initial_response = 3;
inline bool AuthenticateStart::has_initial_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthenticateStart::set_has_initial_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthenticateStart::clear_has_initial_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthenticateStart::clear_initial_response() {
  initial_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_initial_response();
}
inline const ::std::string& AuthenticateStart::initial_response() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateStart.initial_response)
  return initial_response_.GetNoArena();
}
inline void AuthenticateStart::set_initial_response(const ::std::string& value) {
  set_has_initial_response();
  initial_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateStart.initial_response)
}
#if LANG_CXX11
inline void AuthenticateStart::set_initial_response(::std::string&& value) {
  set_has_initial_response();
  initial_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateStart.initial_response)
}
#endif
inline void AuthenticateStart::set_initial_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_initial_response();
  initial_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateStart.initial_response)
}
inline void AuthenticateStart::set_initial_response(const void* value, size_t size) {
  set_has_initial_response();
  initial_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateStart.initial_response)
}
inline ::std::string* AuthenticateStart::mutable_initial_response() {
  set_has_initial_response();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateStart.initial_response)
  return initial_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateStart::release_initial_response() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateStart.initial_response)
  if (!has_initial_response()) {
    return NULL;
  }
  clear_has_initial_response();
  return initial_response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateStart::set_allocated_initial_response(::std::string* initial_response) {
  if (initial_response != NULL) {
    set_has_initial_response();
  } else {
    clear_has_initial_response();
  }
  initial_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_response);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateStart.initial_response)
}

// -------------------------------------------------------------------

// AuthenticateContinue

// required bytes auth_data = 1;
inline bool AuthenticateContinue::has_auth_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticateContinue::set_has_auth_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthenticateContinue::clear_has_auth_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthenticateContinue::clear_auth_data() {
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_data();
}
inline const ::std::string& AuthenticateContinue::auth_data() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateContinue.auth_data)
  return auth_data_.GetNoArena();
}
inline void AuthenticateContinue::set_auth_data(const ::std::string& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateContinue.auth_data)
}
#if LANG_CXX11
inline void AuthenticateContinue::set_auth_data(::std::string&& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateContinue.auth_data)
}
#endif
inline void AuthenticateContinue::set_auth_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateContinue.auth_data)
}
inline void AuthenticateContinue::set_auth_data(const void* value, size_t size) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateContinue.auth_data)
}
inline ::std::string* AuthenticateContinue::mutable_auth_data() {
  set_has_auth_data();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateContinue.auth_data)
  return auth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateContinue::release_auth_data() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateContinue.auth_data)
  if (!has_auth_data()) {
    return NULL;
  }
  clear_has_auth_data();
  return auth_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateContinue::set_allocated_auth_data(::std::string* auth_data) {
  if (auth_data != NULL) {
    set_has_auth_data();
  } else {
    clear_has_auth_data();
  }
  auth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_data);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateContinue.auth_data)
}

// -------------------------------------------------------------------

// AuthenticateOk

// optional bytes auth_data = 1;
inline bool AuthenticateOk::has_auth_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticateOk::set_has_auth_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthenticateOk::clear_has_auth_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthenticateOk::clear_auth_data() {
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_data();
}
inline const ::std::string& AuthenticateOk::auth_data() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.AuthenticateOk.auth_data)
  return auth_data_.GetNoArena();
}
inline void AuthenticateOk::set_auth_data(const ::std::string& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Session.AuthenticateOk.auth_data)
}
#if LANG_CXX11
inline void AuthenticateOk::set_auth_data(::std::string&& value) {
  set_has_auth_data();
  auth_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Session.AuthenticateOk.auth_data)
}
#endif
inline void AuthenticateOk::set_auth_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Session.AuthenticateOk.auth_data)
}
inline void AuthenticateOk::set_auth_data(const void* value, size_t size) {
  set_has_auth_data();
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Session.AuthenticateOk.auth_data)
}
inline ::std::string* AuthenticateOk::mutable_auth_data() {
  set_has_auth_data();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Session.AuthenticateOk.auth_data)
  return auth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticateOk::release_auth_data() {
  // @@protoc_insertion_point(field_release:Mysqlx.Session.AuthenticateOk.auth_data)
  if (!has_auth_data()) {
    return NULL;
  }
  clear_has_auth_data();
  return auth_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateOk::set_allocated_auth_data(::std::string* auth_data) {
  if (auth_data != NULL) {
    set_has_auth_data();
  } else {
    clear_has_auth_data();
  }
  auth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_data);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Session.AuthenticateOk.auth_data)
}

// -------------------------------------------------------------------

// Reset

// optional bool keep_open = 1 [default = false];
inline bool Reset::has_keep_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reset::set_has_keep_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reset::clear_has_keep_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reset::clear_keep_open() {
  keep_open_ = false;
  clear_has_keep_open();
}
inline bool Reset::keep_open() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Session.Reset.keep_open)
  return keep_open_;
}
inline void Reset::set_keep_open(bool value) {
  set_has_keep_open();
  keep_open_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Session.Reset.keep_open)
}

// -------------------------------------------------------------------

// Close

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Session
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mysqlx_5fsession_2eproto
