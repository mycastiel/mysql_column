// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_cursor.proto

#include "mysqlx_cursor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mysqlx_5fcursor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fcursor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Open_OneOfMessage;
}  // namespace protobuf_mysqlx_5fcursor_2eproto
namespace protobuf_mysqlx_5fprepare_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fprepare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Execute;
}  // namespace protobuf_mysqlx_5fprepare_2eproto
namespace Mysqlx {
namespace Cursor {
class Open_OneOfMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Open_OneOfMessage>
      _instance;
} _Open_OneOfMessage_default_instance_;
class OpenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Open>
      _instance;
} _Open_default_instance_;
class FetchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fetch>
      _instance;
} _Fetch_default_instance_;
class CloseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Close>
      _instance;
} _Close_default_instance_;
}  // namespace Cursor
}  // namespace Mysqlx
namespace protobuf_mysqlx_5fcursor_2eproto {
static void InitDefaultsOpen_OneOfMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Cursor::_Open_OneOfMessage_default_instance_;
    new (ptr) ::Mysqlx::Cursor::Open_OneOfMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Cursor::Open_OneOfMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Open_OneOfMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOpen_OneOfMessage}, {
      &protobuf_mysqlx_5fprepare_2eproto::scc_info_Execute.base,}};

static void InitDefaultsOpen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Cursor::_Open_default_instance_;
    new (ptr) ::Mysqlx::Cursor::Open();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Cursor::Open::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Open =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOpen}, {
      &protobuf_mysqlx_5fcursor_2eproto::scc_info_Open_OneOfMessage.base,}};

static void InitDefaultsFetch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Cursor::_Fetch_default_instance_;
    new (ptr) ::Mysqlx::Cursor::Fetch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Cursor::Fetch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Fetch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFetch}, {}};

static void InitDefaultsClose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Cursor::_Close_default_instance_;
    new (ptr) ::Mysqlx::Cursor::Close();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Cursor::Close::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Close =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClose}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Open_OneOfMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Open.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Fetch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Close.base);
}

}  // namespace protobuf_mysqlx_5fcursor_2eproto
namespace Mysqlx {
namespace Cursor {
bool Open_OneOfMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Open_OneOfMessage_Type Open_OneOfMessage::PREPARE_EXECUTE;
const Open_OneOfMessage_Type Open_OneOfMessage::Type_MIN;
const Open_OneOfMessage_Type Open_OneOfMessage::Type_MAX;
const int Open_OneOfMessage::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Open_OneOfMessage::InitAsDefaultInstance() {
  ::Mysqlx::Cursor::_Open_OneOfMessage_default_instance_._instance.get_mutable()->prepare_execute_ = const_cast< ::Mysqlx::Prepare::Execute*>(
      ::Mysqlx::Prepare::Execute::internal_default_instance());
}
void Open_OneOfMessage::clear_prepare_execute() {
  if (prepare_execute_ != NULL) prepare_execute_->Clear();
  clear_has_prepare_execute();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Open_OneOfMessage::kTypeFieldNumber;
const int Open_OneOfMessage::kPrepareExecuteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Open_OneOfMessage::Open_OneOfMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fcursor_2eproto::scc_info_Open_OneOfMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Cursor.Open.OneOfMessage)
}
Open_OneOfMessage::Open_OneOfMessage(const Open_OneOfMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prepare_execute()) {
    prepare_execute_ = new ::Mysqlx::Prepare::Execute(*from.prepare_execute_);
  } else {
    prepare_execute_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Cursor.Open.OneOfMessage)
}

void Open_OneOfMessage::SharedCtor() {
  ::memset(&prepare_execute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&prepare_execute_)) + sizeof(type_));
}

Open_OneOfMessage::~Open_OneOfMessage() {
  // @@protoc_insertion_point(destructor:Mysqlx.Cursor.Open.OneOfMessage)
  SharedDtor();
}

void Open_OneOfMessage::SharedDtor() {
  if (this != internal_default_instance()) delete prepare_execute_;
}

void Open_OneOfMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Open_OneOfMessage& Open_OneOfMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fcursor_2eproto::scc_info_Open_OneOfMessage.base);
  return *internal_default_instance();
}


void Open_OneOfMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Cursor.Open.OneOfMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(prepare_execute_ != NULL);
    prepare_execute_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Open_OneOfMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Cursor.Open.OneOfMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Cursor::Open_OneOfMessage_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Cursor::Open_OneOfMessage_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Prepare.Execute prepare_execute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prepare_execute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Cursor.Open.OneOfMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Cursor.Open.OneOfMessage)
  return false;
#undef DO_
}

void Open_OneOfMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Cursor.Open.OneOfMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Prepare.Execute prepare_execute = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_prepare_execute(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Cursor.Open.OneOfMessage)
}

size_t Open_OneOfMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Cursor.Open.OneOfMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .Mysqlx.Cursor.Open.OneOfMessage.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional .Mysqlx.Prepare.Execute prepare_execute = 2;
  if (has_prepare_execute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prepare_execute_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open_OneOfMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Open_OneOfMessage*>(&from));
}

void Open_OneOfMessage::MergeFrom(const Open_OneOfMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Cursor.Open.OneOfMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_prepare_execute()->::Mysqlx::Prepare::Execute::MergeFrom(from.prepare_execute());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Open_OneOfMessage::CopyFrom(const Open_OneOfMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Cursor.Open.OneOfMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_OneOfMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_prepare_execute()) {
    if (!this->prepare_execute_->IsInitialized()) return false;
  }
  return true;
}

void Open_OneOfMessage::Swap(Open_OneOfMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Open_OneOfMessage::InternalSwap(Open_OneOfMessage* other) {
  using std::swap;
  swap(prepare_execute_, other->prepare_execute_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Open_OneOfMessage::GetTypeName() const {
  return "Mysqlx.Cursor.Open.OneOfMessage";
}


// ===================================================================

void Open::InitAsDefaultInstance() {
  ::Mysqlx::Cursor::_Open_default_instance_._instance.get_mutable()->stmt_ = const_cast< ::Mysqlx::Cursor::Open_OneOfMessage*>(
      ::Mysqlx::Cursor::Open_OneOfMessage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Open::kCursorIdFieldNumber;
const int Open::kStmtFieldNumber;
const int Open::kFetchRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Open::Open()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fcursor_2eproto::scc_info_Open.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Cursor.Open)
}
Open::Open(const Open& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stmt()) {
    stmt_ = new ::Mysqlx::Cursor::Open_OneOfMessage(*from.stmt_);
  } else {
    stmt_ = NULL;
  }
  ::memcpy(&cursor_id_, &from.cursor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fetch_rows_) -
    reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Cursor.Open)
}

void Open::SharedCtor() {
  ::memset(&stmt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetch_rows_) -
      reinterpret_cast<char*>(&stmt_)) + sizeof(fetch_rows_));
}

Open::~Open() {
  // @@protoc_insertion_point(destructor:Mysqlx.Cursor.Open)
  SharedDtor();
}

void Open::SharedDtor() {
  if (this != internal_default_instance()) delete stmt_;
}

void Open::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Open& Open::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fcursor_2eproto::scc_info_Open.base);
  return *internal_default_instance();
}


void Open::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Cursor.Open)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stmt_ != NULL);
    stmt_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&cursor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fetch_rows_) -
        reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Cursor.Open)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cursor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cursor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stmt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fetch_rows = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_fetch_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Cursor.Open)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Cursor.Open)
  return false;
#undef DO_
}

void Open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Cursor.Open)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cursor_id(), output);
  }

  // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_stmt(), output);
  }

  // optional uint64 fetch_rows = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fetch_rows(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Cursor.Open)
}

size_t Open::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Cursor.Open)
  size_t total_size = 0;

  if (has_stmt()) {
    // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stmt_);
  }

  if (has_cursor_id()) {
    // required uint32 cursor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cursor_id());
  }

  return total_size;
}
size_t Open::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Cursor.Open)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Mysqlx.Cursor.Open.OneOfMessage stmt = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stmt_);

    // required uint32 cursor_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cursor_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 fetch_rows = 5;
  if (has_fetch_rows()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fetch_rows());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Open*>(&from));
}

void Open::MergeFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Cursor.Open)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stmt()->::Mysqlx::Cursor::Open_OneOfMessage::MergeFrom(from.stmt());
    }
    if (cached_has_bits & 0x00000002u) {
      cursor_id_ = from.cursor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      fetch_rows_ = from.fetch_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Open::CopyFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Cursor.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_stmt()) {
    if (!this->stmt_->IsInitialized()) return false;
  }
  return true;
}

void Open::Swap(Open* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Open::InternalSwap(Open* other) {
  using std::swap;
  swap(stmt_, other->stmt_);
  swap(cursor_id_, other->cursor_id_);
  swap(fetch_rows_, other->fetch_rows_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Open::GetTypeName() const {
  return "Mysqlx.Cursor.Open";
}


// ===================================================================

void Fetch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fetch::kCursorIdFieldNumber;
const int Fetch::kFetchRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fetch::Fetch()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fcursor_2eproto::scc_info_Fetch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Cursor.Fetch)
}
Fetch::Fetch(const Fetch& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cursor_id_, &from.cursor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fetch_rows_) -
    reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Cursor.Fetch)
}

void Fetch::SharedCtor() {
  ::memset(&cursor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fetch_rows_) -
      reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
}

Fetch::~Fetch() {
  // @@protoc_insertion_point(destructor:Mysqlx.Cursor.Fetch)
  SharedDtor();
}

void Fetch::SharedDtor() {
}

void Fetch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fetch& Fetch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fcursor_2eproto::scc_info_Fetch.base);
  return *internal_default_instance();
}


void Fetch::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Cursor.Fetch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&cursor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fetch_rows_) -
        reinterpret_cast<char*>(&cursor_id_)) + sizeof(fetch_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Cursor.Fetch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cursor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cursor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fetch_rows = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_fetch_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Cursor.Fetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Cursor.Fetch)
  return false;
#undef DO_
}

void Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Cursor.Fetch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cursor_id(), output);
  }

  // optional uint64 fetch_rows = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fetch_rows(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Cursor.Fetch)
}

size_t Fetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Cursor.Fetch)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 cursor_id = 1;
  if (has_cursor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cursor_id());
  }
  // optional uint64 fetch_rows = 5;
  if (has_fetch_rows()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fetch_rows());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fetch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fetch*>(&from));
}

void Fetch::MergeFrom(const Fetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Cursor.Fetch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cursor_id_ = from.cursor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fetch_rows_ = from.fetch_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fetch::CopyFrom(const Fetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Cursor.Fetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fetch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Fetch::Swap(Fetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fetch::InternalSwap(Fetch* other) {
  using std::swap;
  swap(cursor_id_, other->cursor_id_);
  swap(fetch_rows_, other->fetch_rows_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Fetch::GetTypeName() const {
  return "Mysqlx.Cursor.Fetch";
}


// ===================================================================

void Close::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Close::kCursorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Close::Close()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fcursor_2eproto::scc_info_Close.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Cursor.Close)
}
Close::Close(const Close& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cursor_id_ = from.cursor_id_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Cursor.Close)
}

void Close::SharedCtor() {
  cursor_id_ = 0u;
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Mysqlx.Cursor.Close)
  SharedDtor();
}

void Close::SharedDtor() {
}

void Close::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Close& Close::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fcursor_2eproto::scc_info_Close.base);
  return *internal_default_instance();
}


void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Cursor.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cursor_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Cursor.Close)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cursor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cursor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Cursor.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Cursor.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Cursor.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cursor_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Cursor.Close)
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Cursor.Close)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 cursor_id = 1;
  if (has_cursor_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cursor_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Close*>(&from));
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Cursor.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cursor_id()) {
    set_cursor_id(from.cursor_id());
  }
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Cursor.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Close::Swap(Close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Close::InternalSwap(Close* other) {
  using std::swap;
  swap(cursor_id_, other->cursor_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Close::GetTypeName() const {
  return "Mysqlx.Cursor.Close";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Cursor
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Cursor::Open_OneOfMessage* Arena::CreateMaybeMessage< ::Mysqlx::Cursor::Open_OneOfMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Cursor::Open_OneOfMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Cursor::Open* Arena::CreateMaybeMessage< ::Mysqlx::Cursor::Open >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Cursor::Open >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Cursor::Fetch* Arena::CreateMaybeMessage< ::Mysqlx::Cursor::Fetch >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Cursor::Fetch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Cursor::Close* Arena::CreateMaybeMessage< ::Mysqlx::Cursor::Close >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Cursor::Close >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
