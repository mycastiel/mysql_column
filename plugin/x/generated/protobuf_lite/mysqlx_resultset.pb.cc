// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_resultset.proto

#include "mysqlx_resultset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Resultset {
class FetchDoneMoreOutParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchDoneMoreOutParams>
      _instance;
} _FetchDoneMoreOutParams_default_instance_;
class FetchDoneMoreResultsetsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchDoneMoreResultsets>
      _instance;
} _FetchDoneMoreResultsets_default_instance_;
class FetchDoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchDone>
      _instance;
} _FetchDone_default_instance_;
class FetchSuspendedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FetchSuspended>
      _instance;
} _FetchSuspended_default_instance_;
class ColumnMetaDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnMetaData>
      _instance;
} _ColumnMetaData_default_instance_;
class RowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Row>
      _instance;
} _Row_default_instance_;
}  // namespace Resultset
}  // namespace Mysqlx
namespace protobuf_mysqlx_5fresultset_2eproto {
static void InitDefaultsFetchDoneMoreOutParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_FetchDoneMoreOutParams_default_instance_;
    new (ptr) ::Mysqlx::Resultset::FetchDoneMoreOutParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::FetchDoneMoreOutParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FetchDoneMoreOutParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFetchDoneMoreOutParams}, {}};

static void InitDefaultsFetchDoneMoreResultsets() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_FetchDoneMoreResultsets_default_instance_;
    new (ptr) ::Mysqlx::Resultset::FetchDoneMoreResultsets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::FetchDoneMoreResultsets::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FetchDoneMoreResultsets =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFetchDoneMoreResultsets}, {}};

static void InitDefaultsFetchDone() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_FetchDone_default_instance_;
    new (ptr) ::Mysqlx::Resultset::FetchDone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::FetchDone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FetchDone =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFetchDone}, {}};

static void InitDefaultsFetchSuspended() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_FetchSuspended_default_instance_;
    new (ptr) ::Mysqlx::Resultset::FetchSuspended();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::FetchSuspended::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FetchSuspended =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFetchSuspended}, {}};

static void InitDefaultsColumnMetaData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_ColumnMetaData_default_instance_;
    new (ptr) ::Mysqlx::Resultset::ColumnMetaData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::ColumnMetaData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ColumnMetaData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColumnMetaData}, {}};

static void InitDefaultsRow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Resultset::_Row_default_instance_;
    new (ptr) ::Mysqlx::Resultset::Row();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Resultset::Row::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Row =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRow}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FetchDoneMoreOutParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FetchDoneMoreResultsets.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FetchDone.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FetchSuspended.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnMetaData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Row.base);
}

}  // namespace protobuf_mysqlx_5fresultset_2eproto
namespace Mysqlx {
namespace Resultset {
bool ColumnMetaData_FieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 10:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ColumnMetaData_FieldType ColumnMetaData::SINT;
const ColumnMetaData_FieldType ColumnMetaData::UINT;
const ColumnMetaData_FieldType ColumnMetaData::DOUBLE;
const ColumnMetaData_FieldType ColumnMetaData::FLOAT;
const ColumnMetaData_FieldType ColumnMetaData::BYTES;
const ColumnMetaData_FieldType ColumnMetaData::TIME;
const ColumnMetaData_FieldType ColumnMetaData::DATETIME;
const ColumnMetaData_FieldType ColumnMetaData::SET;
const ColumnMetaData_FieldType ColumnMetaData::ENUM;
const ColumnMetaData_FieldType ColumnMetaData::BIT;
const ColumnMetaData_FieldType ColumnMetaData::DECIMAL;
const ColumnMetaData_FieldType ColumnMetaData::FieldType_MIN;
const ColumnMetaData_FieldType ColumnMetaData::FieldType_MAX;
const int ColumnMetaData::FieldType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ContentType_BYTES_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ContentType_DATETIME_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FetchDoneMoreOutParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchDoneMoreOutParams::FetchDoneMoreOutParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fresultset_2eproto::scc_info_FetchDoneMoreOutParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
}
FetchDoneMoreOutParams::FetchDoneMoreOutParams(const FetchDoneMoreOutParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
}

void FetchDoneMoreOutParams::SharedCtor() {
}

FetchDoneMoreOutParams::~FetchDoneMoreOutParams() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDoneMoreOutParams)
  SharedDtor();
}

void FetchDoneMoreOutParams::SharedDtor() {
}

void FetchDoneMoreOutParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDoneMoreOutParams& FetchDoneMoreOutParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fresultset_2eproto::scc_info_FetchDoneMoreOutParams.base);
  return *internal_default_instance();
}


void FetchDoneMoreOutParams::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchDoneMoreOutParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDoneMoreOutParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDoneMoreOutParams)
  return false;
#undef DO_
}

void FetchDoneMoreOutParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDoneMoreOutParams)
}

size_t FetchDoneMoreOutParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDoneMoreOutParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FetchDoneMoreOutParams*>(&from));
}

void FetchDoneMoreOutParams::MergeFrom(const FetchDoneMoreOutParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchDoneMoreOutParams::CopyFrom(const FetchDoneMoreOutParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDoneMoreOutParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDoneMoreOutParams::IsInitialized() const {
  return true;
}

void FetchDoneMoreOutParams::Swap(FetchDoneMoreOutParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchDoneMoreOutParams::InternalSwap(FetchDoneMoreOutParams* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FetchDoneMoreOutParams::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDoneMoreOutParams";
}


// ===================================================================

void FetchDoneMoreResultsets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchDoneMoreResultsets::FetchDoneMoreResultsets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fresultset_2eproto::scc_info_FetchDoneMoreResultsets.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
}
FetchDoneMoreResultsets::FetchDoneMoreResultsets(const FetchDoneMoreResultsets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
}

void FetchDoneMoreResultsets::SharedCtor() {
}

FetchDoneMoreResultsets::~FetchDoneMoreResultsets() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDoneMoreResultsets)
  SharedDtor();
}

void FetchDoneMoreResultsets::SharedDtor() {
}

void FetchDoneMoreResultsets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDoneMoreResultsets& FetchDoneMoreResultsets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fresultset_2eproto::scc_info_FetchDoneMoreResultsets.base);
  return *internal_default_instance();
}


void FetchDoneMoreResultsets::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchDoneMoreResultsets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDoneMoreResultsets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDoneMoreResultsets)
  return false;
#undef DO_
}

void FetchDoneMoreResultsets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDoneMoreResultsets)
}

size_t FetchDoneMoreResultsets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDoneMoreResultsets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FetchDoneMoreResultsets*>(&from));
}

void FetchDoneMoreResultsets::MergeFrom(const FetchDoneMoreResultsets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchDoneMoreResultsets::CopyFrom(const FetchDoneMoreResultsets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDoneMoreResultsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDoneMoreResultsets::IsInitialized() const {
  return true;
}

void FetchDoneMoreResultsets::Swap(FetchDoneMoreResultsets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchDoneMoreResultsets::InternalSwap(FetchDoneMoreResultsets* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FetchDoneMoreResultsets::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDoneMoreResultsets";
}


// ===================================================================

void FetchDone::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchDone::FetchDone()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fresultset_2eproto::scc_info_FetchDone.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchDone)
}
FetchDone::FetchDone(const FetchDone& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchDone)
}

void FetchDone::SharedCtor() {
}

FetchDone::~FetchDone() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchDone)
  SharedDtor();
}

void FetchDone::SharedDtor() {
}

void FetchDone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchDone& FetchDone::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fresultset_2eproto::scc_info_FetchDone.base);
  return *internal_default_instance();
}


void FetchDone::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchDone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchDone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchDone)
  return false;
#undef DO_
}

void FetchDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchDone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchDone)
}

size_t FetchDone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchDone)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchDone::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FetchDone*>(&from));
}

void FetchDone::MergeFrom(const FetchDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchDone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchDone::CopyFrom(const FetchDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDone::IsInitialized() const {
  return true;
}

void FetchDone::Swap(FetchDone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchDone::InternalSwap(FetchDone* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FetchDone::GetTypeName() const {
  return "Mysqlx.Resultset.FetchDone";
}


// ===================================================================

void FetchSuspended::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchSuspended::FetchSuspended()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fresultset_2eproto::scc_info_FetchSuspended.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.FetchSuspended)
}
FetchSuspended::FetchSuspended(const FetchSuspended& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.FetchSuspended)
}

void FetchSuspended::SharedCtor() {
}

FetchSuspended::~FetchSuspended() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.FetchSuspended)
  SharedDtor();
}

void FetchSuspended::SharedDtor() {
}

void FetchSuspended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchSuspended& FetchSuspended::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fresultset_2eproto::scc_info_FetchSuspended.base);
  return *internal_default_instance();
}


void FetchSuspended::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.FetchSuspended)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FetchSuspended::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.FetchSuspended)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.FetchSuspended)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.FetchSuspended)
  return false;
#undef DO_
}

void FetchSuspended::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.FetchSuspended)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.FetchSuspended)
}

size_t FetchSuspended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.FetchSuspended)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchSuspended::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FetchSuspended*>(&from));
}

void FetchSuspended::MergeFrom(const FetchSuspended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.FetchSuspended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FetchSuspended::CopyFrom(const FetchSuspended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.FetchSuspended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSuspended::IsInitialized() const {
  return true;
}

void FetchSuspended::Swap(FetchSuspended* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchSuspended::InternalSwap(FetchSuspended* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string FetchSuspended::GetTypeName() const {
  return "Mysqlx.Resultset.FetchSuspended";
}


// ===================================================================

void ColumnMetaData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnMetaData::kTypeFieldNumber;
const int ColumnMetaData::kNameFieldNumber;
const int ColumnMetaData::kOriginalNameFieldNumber;
const int ColumnMetaData::kTableFieldNumber;
const int ColumnMetaData::kOriginalTableFieldNumber;
const int ColumnMetaData::kSchemaFieldNumber;
const int ColumnMetaData::kCatalogFieldNumber;
const int ColumnMetaData::kCollationFieldNumber;
const int ColumnMetaData::kFractionalDigitsFieldNumber;
const int ColumnMetaData::kLengthFieldNumber;
const int ColumnMetaData::kFlagsFieldNumber;
const int ColumnMetaData::kContentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnMetaData::ColumnMetaData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fresultset_2eproto::scc_info_ColumnMetaData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.ColumnMetaData)
}
ColumnMetaData::ColumnMetaData(const ColumnMetaData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  original_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_name()) {
    original_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_name_);
  }
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table()) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  original_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_table()) {
    original_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_table_);
  }
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema()) {
    schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  catalog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog()) {
    catalog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_);
  }
  ::memcpy(&collation_, &from.collation_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&collation_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.ColumnMetaData)
}

void ColumnMetaData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&collation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_type_) -
      reinterpret_cast<char*>(&collation_)) + sizeof(content_type_));
  type_ = 1;
}

ColumnMetaData::~ColumnMetaData() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.ColumnMetaData)
  SharedDtor();
}

void ColumnMetaData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnMetaData& ColumnMetaData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fresultset_2eproto::scc_info_ColumnMetaData.base);
  return *internal_default_instance();
}


void ColumnMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.ColumnMetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      original_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      table_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      original_table_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      schema_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      catalog_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&collation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fractional_digits_) -
        reinterpret_cast<char*>(&collation_)) + sizeof(fractional_digits_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&content_type_) -
        reinterpret_cast<char*>(&length_)) + sizeof(content_type_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.ColumnMetaData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Resultset::ColumnMetaData_FieldType_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Resultset::ColumnMetaData_FieldType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes original_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes table = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes original_table = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes schema = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes catalog = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_catalog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 collation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_collation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fractional_digits = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_fractional_digits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fractional_digits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 content_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_content_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.ColumnMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.ColumnMetaData)
  return false;
#undef DO_
}

void ColumnMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.ColumnMetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes original_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->original_name(), output);
  }

  // optional bytes table = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->table(), output);
  }

  // optional bytes original_table = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->original_table(), output);
  }

  // optional bytes schema = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->schema(), output);
  }

  // optional bytes catalog = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->catalog(), output);
  }

  // optional uint64 collation = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->collation(), output);
  }

  // optional uint32 fractional_digits = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fractional_digits(), output);
  }

  // optional uint32 length = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->length(), output);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }

  // optional uint32 content_type = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->content_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.ColumnMetaData)
}

size_t ColumnMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.ColumnMetaData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .Mysqlx.Resultset.ColumnMetaData.FieldType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes original_name = 3;
    if (has_original_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_name());
    }

    // optional bytes table = 4;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional bytes original_table = 5;
    if (has_original_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->original_table());
    }

    // optional bytes schema = 6;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema());
    }

    // optional bytes catalog = 7;
    if (has_catalog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->catalog());
    }

    // optional uint64 collation = 8;
    if (has_collation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collation());
    }

    // optional uint32 fractional_digits = 9;
    if (has_fractional_digits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fractional_digits());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 length = 10;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional uint32 flags = 11;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 content_type = 12;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->content_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnMetaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ColumnMetaData*>(&from));
}

void ColumnMetaData::MergeFrom(const ColumnMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.ColumnMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_original_name();
      original_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_table();
      table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_original_table();
      original_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_table_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_schema();
      schema_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_catalog();
      catalog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_);
    }
    if (cached_has_bits & 0x00000040u) {
      collation_ = from.collation_;
    }
    if (cached_has_bits & 0x00000080u) {
      fractional_digits_ = from.fractional_digits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      content_type_ = from.content_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnMetaData::CopyFrom(const ColumnMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.ColumnMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000800) != 0x00000800) return false;
  return true;
}

void ColumnMetaData::Swap(ColumnMetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnMetaData::InternalSwap(ColumnMetaData* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  original_name_.Swap(&other->original_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_.Swap(&other->table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  original_table_.Swap(&other->original_table_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_.Swap(&other->schema_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  catalog_.Swap(&other->catalog_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(collation_, other->collation_);
  swap(fractional_digits_, other->fractional_digits_);
  swap(length_, other->length_);
  swap(flags_, other->flags_);
  swap(content_type_, other->content_type_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ColumnMetaData::GetTypeName() const {
  return "Mysqlx.Resultset.ColumnMetaData";
}


// ===================================================================

void Row::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fresultset_2eproto::scc_info_Row.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Resultset.Row)
}
Row::Row(const Row& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Resultset.Row)
}

void Row::SharedCtor() {
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:Mysqlx.Resultset.Row)
  SharedDtor();
}

void Row::SharedDtor() {
}

void Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Row& Row::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fresultset_2eproto::scc_info_Row.base);
  return *internal_default_instance();
}


void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Resultset.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Resultset.Row)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Resultset.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Resultset.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Resultset.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes field = 1;
  for (int i = 0, n = this->field_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->field(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Resultset.Row)
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Resultset.Row)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated bytes field = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_size());
  for (int i = 0, n = this->field_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->field(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Row::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Row*>(&from));
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Resultset.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Resultset.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  using std::swap;
  field_.InternalSwap(CastToBase(&other->field_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Row::GetTypeName() const {
  return "Mysqlx.Resultset.Row";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Resultset
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Resultset::FetchDoneMoreOutParams* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::FetchDoneMoreOutParams >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::FetchDoneMoreOutParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Resultset::FetchDoneMoreResultsets* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::FetchDoneMoreResultsets >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::FetchDoneMoreResultsets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Resultset::FetchDone* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::FetchDone >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::FetchDone >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Resultset::FetchSuspended* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::FetchSuspended >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::FetchSuspended >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Resultset::ColumnMetaData* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::ColumnMetaData >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::ColumnMetaData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Resultset::Row* Arena::CreateMaybeMessage< ::Mysqlx::Resultset::Row >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Resultset::Row >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
