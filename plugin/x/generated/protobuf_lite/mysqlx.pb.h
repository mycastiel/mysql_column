// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx.proto

#ifndef PROTOBUF_INCLUDED_mysqlx_2eproto
#define PROTOBUF_INCLUDED_mysqlx_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_2eproto 

namespace protobuf_mysqlx_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_mysqlx_2eproto
namespace Mysqlx {
class ClientMessages;
class ClientMessagesDefaultTypeInternal;
extern ClientMessagesDefaultTypeInternal _ClientMessages_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Ok;
class OkDefaultTypeInternal;
extern OkDefaultTypeInternal _Ok_default_instance_;
class ServerMessages;
class ServerMessagesDefaultTypeInternal;
extern ServerMessagesDefaultTypeInternal _ServerMessages_default_instance_;
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> ::Mysqlx::ClientMessages* Arena::CreateMaybeMessage<::Mysqlx::ClientMessages>(Arena*);
template<> ::Mysqlx::Error* Arena::CreateMaybeMessage<::Mysqlx::Error>(Arena*);
template<> ::Mysqlx::Ok* Arena::CreateMaybeMessage<::Mysqlx::Ok>(Arena*);
template<> ::Mysqlx::ServerMessages* Arena::CreateMaybeMessage<::Mysqlx::ServerMessages>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Mysqlx {

enum ClientMessages_Type {
  ClientMessages_Type_CON_CAPABILITIES_GET = 1,
  ClientMessages_Type_CON_CAPABILITIES_SET = 2,
  ClientMessages_Type_CON_CLOSE = 3,
  ClientMessages_Type_SESS_AUTHENTICATE_START = 4,
  ClientMessages_Type_SESS_AUTHENTICATE_CONTINUE = 5,
  ClientMessages_Type_SESS_RESET = 6,
  ClientMessages_Type_SESS_CLOSE = 7,
  ClientMessages_Type_SQL_STMT_EXECUTE = 12,
  ClientMessages_Type_CRUD_FIND = 17,
  ClientMessages_Type_CRUD_INSERT = 18,
  ClientMessages_Type_CRUD_UPDATE = 19,
  ClientMessages_Type_CRUD_DELETE = 20,
  ClientMessages_Type_EXPECT_OPEN = 24,
  ClientMessages_Type_EXPECT_CLOSE = 25,
  ClientMessages_Type_CRUD_CREATE_VIEW = 30,
  ClientMessages_Type_CRUD_MODIFY_VIEW = 31,
  ClientMessages_Type_CRUD_DROP_VIEW = 32,
  ClientMessages_Type_PREPARE_PREPARE = 40,
  ClientMessages_Type_PREPARE_EXECUTE = 41,
  ClientMessages_Type_PREPARE_DEALLOCATE = 42,
  ClientMessages_Type_CURSOR_OPEN = 43,
  ClientMessages_Type_CURSOR_CLOSE = 44,
  ClientMessages_Type_CURSOR_FETCH = 45
};
bool ClientMessages_Type_IsValid(int value);
const ClientMessages_Type ClientMessages_Type_Type_MIN = ClientMessages_Type_CON_CAPABILITIES_GET;
const ClientMessages_Type ClientMessages_Type_Type_MAX = ClientMessages_Type_CURSOR_FETCH;
const int ClientMessages_Type_Type_ARRAYSIZE = ClientMessages_Type_Type_MAX + 1;

enum ServerMessages_Type {
  ServerMessages_Type_OK = 0,
  ServerMessages_Type_ERROR = 1,
  ServerMessages_Type_CONN_CAPABILITIES = 2,
  ServerMessages_Type_SESS_AUTHENTICATE_CONTINUE = 3,
  ServerMessages_Type_SESS_AUTHENTICATE_OK = 4,
  ServerMessages_Type_NOTICE = 11,
  ServerMessages_Type_RESULTSET_COLUMN_META_DATA = 12,
  ServerMessages_Type_RESULTSET_ROW = 13,
  ServerMessages_Type_RESULTSET_FETCH_DONE = 14,
  ServerMessages_Type_RESULTSET_FETCH_SUSPENDED = 15,
  ServerMessages_Type_RESULTSET_FETCH_DONE_MORE_RESULTSETS = 16,
  ServerMessages_Type_SQL_STMT_EXECUTE_OK = 17,
  ServerMessages_Type_RESULTSET_FETCH_DONE_MORE_OUT_PARAMS = 18
};
bool ServerMessages_Type_IsValid(int value);
const ServerMessages_Type ServerMessages_Type_Type_MIN = ServerMessages_Type_OK;
const ServerMessages_Type ServerMessages_Type_Type_MAX = ServerMessages_Type_RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
const int ServerMessages_Type_Type_ARRAYSIZE = ServerMessages_Type_Type_MAX + 1;

enum Error_Severity {
  Error_Severity_ERROR = 0,
  Error_Severity_FATAL = 1
};
bool Error_Severity_IsValid(int value);
const Error_Severity Error_Severity_Severity_MIN = Error_Severity_ERROR;
const Error_Severity Error_Severity_Severity_MAX = Error_Severity_FATAL;
const int Error_Severity_Severity_ARRAYSIZE = Error_Severity_Severity_MAX + 1;

// ===================================================================

class ClientMessages : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.ClientMessages) */ {
 public:
  ClientMessages();
  virtual ~ClientMessages();

  ClientMessages(const ClientMessages& from);

  inline ClientMessages& operator=(const ClientMessages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientMessages(ClientMessages&& from) noexcept
    : ClientMessages() {
    *this = ::std::move(from);
  }

  inline ClientMessages& operator=(ClientMessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessages* internal_default_instance() {
    return reinterpret_cast<const ClientMessages*>(
               &_ClientMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientMessages* other);
  friend void swap(ClientMessages& a, ClientMessages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientMessages* New() const final {
    return CreateMaybeMessage<ClientMessages>(NULL);
  }

  ClientMessages* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessages>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ClientMessages& from);
  void MergeFrom(const ClientMessages& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientMessages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientMessages_Type Type;
  static const Type CON_CAPABILITIES_GET =
    ClientMessages_Type_CON_CAPABILITIES_GET;
  static const Type CON_CAPABILITIES_SET =
    ClientMessages_Type_CON_CAPABILITIES_SET;
  static const Type CON_CLOSE =
    ClientMessages_Type_CON_CLOSE;
  static const Type SESS_AUTHENTICATE_START =
    ClientMessages_Type_SESS_AUTHENTICATE_START;
  static const Type SESS_AUTHENTICATE_CONTINUE =
    ClientMessages_Type_SESS_AUTHENTICATE_CONTINUE;
  static const Type SESS_RESET =
    ClientMessages_Type_SESS_RESET;
  static const Type SESS_CLOSE =
    ClientMessages_Type_SESS_CLOSE;
  static const Type SQL_STMT_EXECUTE =
    ClientMessages_Type_SQL_STMT_EXECUTE;
  static const Type CRUD_FIND =
    ClientMessages_Type_CRUD_FIND;
  static const Type CRUD_INSERT =
    ClientMessages_Type_CRUD_INSERT;
  static const Type CRUD_UPDATE =
    ClientMessages_Type_CRUD_UPDATE;
  static const Type CRUD_DELETE =
    ClientMessages_Type_CRUD_DELETE;
  static const Type EXPECT_OPEN =
    ClientMessages_Type_EXPECT_OPEN;
  static const Type EXPECT_CLOSE =
    ClientMessages_Type_EXPECT_CLOSE;
  static const Type CRUD_CREATE_VIEW =
    ClientMessages_Type_CRUD_CREATE_VIEW;
  static const Type CRUD_MODIFY_VIEW =
    ClientMessages_Type_CRUD_MODIFY_VIEW;
  static const Type CRUD_DROP_VIEW =
    ClientMessages_Type_CRUD_DROP_VIEW;
  static const Type PREPARE_PREPARE =
    ClientMessages_Type_PREPARE_PREPARE;
  static const Type PREPARE_EXECUTE =
    ClientMessages_Type_PREPARE_EXECUTE;
  static const Type PREPARE_DEALLOCATE =
    ClientMessages_Type_PREPARE_DEALLOCATE;
  static const Type CURSOR_OPEN =
    ClientMessages_Type_CURSOR_OPEN;
  static const Type CURSOR_CLOSE =
    ClientMessages_Type_CURSOR_CLOSE;
  static const Type CURSOR_FETCH =
    ClientMessages_Type_CURSOR_FETCH;
  static inline bool Type_IsValid(int value) {
    return ClientMessages_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ClientMessages_Type_Type_MIN;
  static const Type Type_MAX =
    ClientMessages_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ClientMessages_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.ClientMessages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mysqlx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerMessages : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.ServerMessages) */ {
 public:
  ServerMessages();
  virtual ~ServerMessages();

  ServerMessages(const ServerMessages& from);

  inline ServerMessages& operator=(const ServerMessages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerMessages(ServerMessages&& from) noexcept
    : ServerMessages() {
    *this = ::std::move(from);
  }

  inline ServerMessages& operator=(ServerMessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServerMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessages* internal_default_instance() {
    return reinterpret_cast<const ServerMessages*>(
               &_ServerMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerMessages* other);
  friend void swap(ServerMessages& a, ServerMessages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerMessages* New() const final {
    return CreateMaybeMessage<ServerMessages>(NULL);
  }

  ServerMessages* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessages>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ServerMessages& from);
  void MergeFrom(const ServerMessages& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerMessages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ServerMessages_Type Type;
  static const Type OK =
    ServerMessages_Type_OK;
  static const Type ERROR =
    ServerMessages_Type_ERROR;
  static const Type CONN_CAPABILITIES =
    ServerMessages_Type_CONN_CAPABILITIES;
  static const Type SESS_AUTHENTICATE_CONTINUE =
    ServerMessages_Type_SESS_AUTHENTICATE_CONTINUE;
  static const Type SESS_AUTHENTICATE_OK =
    ServerMessages_Type_SESS_AUTHENTICATE_OK;
  static const Type NOTICE =
    ServerMessages_Type_NOTICE;
  static const Type RESULTSET_COLUMN_META_DATA =
    ServerMessages_Type_RESULTSET_COLUMN_META_DATA;
  static const Type RESULTSET_ROW =
    ServerMessages_Type_RESULTSET_ROW;
  static const Type RESULTSET_FETCH_DONE =
    ServerMessages_Type_RESULTSET_FETCH_DONE;
  static const Type RESULTSET_FETCH_SUSPENDED =
    ServerMessages_Type_RESULTSET_FETCH_SUSPENDED;
  static const Type RESULTSET_FETCH_DONE_MORE_RESULTSETS =
    ServerMessages_Type_RESULTSET_FETCH_DONE_MORE_RESULTSETS;
  static const Type SQL_STMT_EXECUTE_OK =
    ServerMessages_Type_SQL_STMT_EXECUTE_OK;
  static const Type RESULTSET_FETCH_DONE_MORE_OUT_PARAMS =
    ServerMessages_Type_RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
  static inline bool Type_IsValid(int value) {
    return ServerMessages_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ServerMessages_Type_Type_MIN;
  static const Type Type_MAX =
    ServerMessages_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ServerMessages_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.ServerMessages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mysqlx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ok : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Ok) */ {
 public:
  Ok();
  virtual ~Ok();

  Ok(const Ok& from);

  inline Ok& operator=(const Ok& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ok(Ok&& from) noexcept
    : Ok() {
    *this = ::std::move(from);
  }

  inline Ok& operator=(Ok&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ok& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ok* internal_default_instance() {
    return reinterpret_cast<const Ok*>(
               &_Ok_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Ok* other);
  friend void swap(Ok& a, Ok& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ok* New() const final {
    return CreateMaybeMessage<Ok>(NULL);
  }

  Ok* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ok>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Ok& from);
  void MergeFrom(const Ok& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ok* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Mysqlx.Ok)
 private:
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  friend struct ::protobuf_mysqlx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(NULL);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Error_Severity Severity;
  static const Severity ERROR =
    Error_Severity_ERROR;
  static const Severity FATAL =
    Error_Severity_FATAL;
  static inline bool Severity_IsValid(int value) {
    return Error_Severity_IsValid(value);
  }
  static const Severity Severity_MIN =
    Error_Severity_Severity_MIN;
  static const Severity Severity_MAX =
    Error_Severity_Severity_MAX;
  static const int Severity_ARRAYSIZE =
    Error_Severity_Severity_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required string sql_state = 4;
  bool has_sql_state() const;
  void clear_sql_state();
  static const int kSqlStateFieldNumber = 4;
  const ::std::string& sql_state() const;
  void set_sql_state(const ::std::string& value);
  #if LANG_CXX11
  void set_sql_state(::std::string&& value);
  #endif
  void set_sql_state(const char* value);
  void set_sql_state(const char* value, size_t size);
  ::std::string* mutable_sql_state();
  ::std::string* release_sql_state();
  void set_allocated_sql_state(::std::string* sql_state);

  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  bool has_severity() const;
  void clear_severity();
  static const int kSeverityFieldNumber = 1;
  ::Mysqlx::Error_Severity severity() const;
  void set_severity(::Mysqlx::Error_Severity value);

  // required uint32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Error)
 private:
  void set_has_severity();
  void clear_has_severity();
  void set_has_code();
  void clear_has_code();
  void set_has_sql_state();
  void clear_has_sql_state();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr sql_state_;
  int severity_;
  ::google::protobuf::uint32 code_;
  friend struct ::protobuf_mysqlx_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessages

// -------------------------------------------------------------------

// ServerMessages

// -------------------------------------------------------------------

// Ok

// optional string msg = 1;
inline bool Ok::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ok::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ok::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ok::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Ok::msg() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Ok.msg)
  return msg_.GetNoArena();
}
inline void Ok::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Ok.msg)
}
#if LANG_CXX11
inline void Ok::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Ok.msg)
}
#endif
inline void Ok::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Ok.msg)
}
inline void Ok::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Ok.msg)
}
inline ::std::string* Ok::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Ok.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ok::release_msg() {
  // @@protoc_insertion_point(field_release:Mysqlx.Ok.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ok::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Ok.msg)
}

// -------------------------------------------------------------------

// Error

// optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
inline bool Error::has_severity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_severity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_severity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::Mysqlx::Error_Severity Error::severity() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Error.severity)
  return static_cast< ::Mysqlx::Error_Severity >(severity_);
}
inline void Error::set_severity(::Mysqlx::Error_Severity value) {
  assert(::Mysqlx::Error_Severity_IsValid(value));
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Error.severity)
}

// required uint32 code = 2;
inline bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 Error::code() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Error.code)
  return code_;
}
inline void Error::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Error.code)
}

// required string sql_state = 4;
inline bool Error::has_sql_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_sql_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_sql_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_sql_state() {
  sql_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql_state();
}
inline const ::std::string& Error::sql_state() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Error.sql_state)
  return sql_state_.GetNoArena();
}
inline void Error::set_sql_state(const ::std::string& value) {
  set_has_sql_state();
  sql_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Error.sql_state)
}
#if LANG_CXX11
inline void Error::set_sql_state(::std::string&& value) {
  set_has_sql_state();
  sql_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Error.sql_state)
}
#endif
inline void Error::set_sql_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql_state();
  sql_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Error.sql_state)
}
inline void Error::set_sql_state(const char* value, size_t size) {
  set_has_sql_state();
  sql_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Error.sql_state)
}
inline ::std::string* Error::mutable_sql_state() {
  set_has_sql_state();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Error.sql_state)
  return sql_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_sql_state() {
  // @@protoc_insertion_point(field_release:Mysqlx.Error.sql_state)
  if (!has_sql_state()) {
    return NULL;
  }
  clear_has_sql_state();
  return sql_state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_sql_state(::std::string* sql_state) {
  if (sql_state != NULL) {
    set_has_sql_state();
  } else {
    clear_has_sql_state();
  }
  sql_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql_state);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Error.sql_state)
}

// required string msg = 3;
inline bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Error.msg)
  return msg_.GetNoArena();
}
inline void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Error.msg)
}
#if LANG_CXX11
inline void Error::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Error.msg)
}
#endif
inline void Error::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Error.msg)
}
inline void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Error.msg)
}
inline ::std::string* Error::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:Mysqlx.Error.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Error.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mysqlx

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Mysqlx::ClientMessages_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::Mysqlx::ServerMessages_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::Mysqlx::Error_Severity> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mysqlx_2eproto
