// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_notice.proto

#include "mysqlx_notice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mysqlx_5fdatatypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fdatatypes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Scalar;
}  // namespace protobuf_mysqlx_5fdatatypes_2eproto
namespace Mysqlx {
namespace Notice {
class FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame>
      _instance;
} _Frame_default_instance_;
class WarningDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Warning>
      _instance;
} _Warning_default_instance_;
class SessionVariableChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionVariableChanged>
      _instance;
} _SessionVariableChanged_default_instance_;
class SessionStateChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionStateChanged>
      _instance;
} _SessionStateChanged_default_instance_;
class GroupReplicationStateChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupReplicationStateChanged>
      _instance;
} _GroupReplicationStateChanged_default_instance_;
class ServerHelloDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerHello>
      _instance;
} _ServerHello_default_instance_;
}  // namespace Notice
}  // namespace Mysqlx
namespace protobuf_mysqlx_5fnotice_2eproto {
static void InitDefaultsFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_Frame_default_instance_;
    new (ptr) ::Mysqlx::Notice::Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Frame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrame}, {}};

static void InitDefaultsWarning() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_Warning_default_instance_;
    new (ptr) ::Mysqlx::Notice::Warning();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::Warning::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Warning =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWarning}, {}};

static void InitDefaultsSessionVariableChanged() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_SessionVariableChanged_default_instance_;
    new (ptr) ::Mysqlx::Notice::SessionVariableChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::SessionVariableChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SessionVariableChanged =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSessionVariableChanged}, {
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar.base,}};

static void InitDefaultsSessionStateChanged() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_SessionStateChanged_default_instance_;
    new (ptr) ::Mysqlx::Notice::SessionStateChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::SessionStateChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SessionStateChanged =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSessionStateChanged}, {
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar.base,}};

static void InitDefaultsGroupReplicationStateChanged() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_GroupReplicationStateChanged_default_instance_;
    new (ptr) ::Mysqlx::Notice::GroupReplicationStateChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::GroupReplicationStateChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GroupReplicationStateChanged =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGroupReplicationStateChanged}, {}};

static void InitDefaultsServerHello() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Notice::_ServerHello_default_instance_;
    new (ptr) ::Mysqlx::Notice::ServerHello();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Notice::ServerHello::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerHello =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerHello}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Frame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Warning.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SessionVariableChanged.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SessionStateChanged.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupReplicationStateChanged.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerHello.base);
}

}  // namespace protobuf_mysqlx_5fnotice_2eproto
namespace Mysqlx {
namespace Notice {
bool Frame_Scope_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Frame_Scope Frame::GLOBAL;
const Frame_Scope Frame::LOCAL;
const Frame_Scope Frame::Scope_MIN;
const Frame_Scope Frame::Scope_MAX;
const int Frame::Scope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Frame_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Frame_Type Frame::WARNING;
const Frame_Type Frame::SESSION_VARIABLE_CHANGED;
const Frame_Type Frame::SESSION_STATE_CHANGED;
const Frame_Type Frame::GROUP_REPLICATION_STATE_CHANGED;
const Frame_Type Frame::SERVER_HELLO;
const Frame_Type Frame::Type_MIN;
const Frame_Type Frame::Type_MAX;
const int Frame::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Warning_Level_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Warning_Level Warning::NOTE;
const Warning_Level Warning::WARNING;
const Warning_Level Warning::ERROR;
const Warning_Level Warning::Level_MIN;
const Warning_Level Warning::Level_MAX;
const int Warning::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SessionStateChanged_Parameter_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionStateChanged_Parameter SessionStateChanged::CURRENT_SCHEMA;
const SessionStateChanged_Parameter SessionStateChanged::ACCOUNT_EXPIRED;
const SessionStateChanged_Parameter SessionStateChanged::GENERATED_INSERT_ID;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_AFFECTED;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_FOUND;
const SessionStateChanged_Parameter SessionStateChanged::ROWS_MATCHED;
const SessionStateChanged_Parameter SessionStateChanged::TRX_COMMITTED;
const SessionStateChanged_Parameter SessionStateChanged::TRX_ROLLEDBACK;
const SessionStateChanged_Parameter SessionStateChanged::PRODUCED_MESSAGE;
const SessionStateChanged_Parameter SessionStateChanged::CLIENT_ID_ASSIGNED;
const SessionStateChanged_Parameter SessionStateChanged::GENERATED_DOCUMENT_IDS;
const SessionStateChanged_Parameter SessionStateChanged::Parameter_MIN;
const SessionStateChanged_Parameter SessionStateChanged::Parameter_MAX;
const int SessionStateChanged::Parameter_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool GroupReplicationStateChanged_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GroupReplicationStateChanged_Type GroupReplicationStateChanged::MEMBERSHIP_QUORUM_LOSS;
const GroupReplicationStateChanged_Type GroupReplicationStateChanged::MEMBERSHIP_VIEW_CHANGE;
const GroupReplicationStateChanged_Type GroupReplicationStateChanged::MEMBER_ROLE_CHANGE;
const GroupReplicationStateChanged_Type GroupReplicationStateChanged::MEMBER_STATE_CHANGE;
const GroupReplicationStateChanged_Type GroupReplicationStateChanged::Type_MIN;
const GroupReplicationStateChanged_Type GroupReplicationStateChanged::Type_MAX;
const int GroupReplicationStateChanged::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Frame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kTypeFieldNumber;
const int Frame::kScopeFieldNumber;
const int Frame::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fnotice_2eproto::scc_info_Frame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&scope_) -
    reinterpret_cast<char*>(&type_)) + sizeof(scope_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.Frame)
}

void Frame::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  scope_ = 1;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fnotice_2eproto::scc_info_Frame.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    type_ = 0u;
    scope_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::Frame_Scope_IsValid(value)) {
            set_scope(static_cast< ::Mysqlx::Notice::Frame_Scope >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scope(), output);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.Frame)
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.Frame)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }
  // optional bytes payload = 3;
  if (has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // optional .Mysqlx.Notice.Frame.Scope scope = 2 [default = GLOBAL];
  if (has_scope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Frame*>(&from));
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  using std::swap;
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(scope_, other->scope_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Frame::GetTypeName() const {
  return "Mysqlx.Notice.Frame";
}


// ===================================================================

void Warning::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Warning::kLevelFieldNumber;
const int Warning::kCodeFieldNumber;
const int Warning::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Warning::Warning()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fnotice_2eproto::scc_info_Warning.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.Warning)
}
Warning::Warning(const Warning& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&code_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.Warning)
}

void Warning::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  level_ = 2;
}

Warning::~Warning() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.Warning)
  SharedDtor();
}

void Warning::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Warning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Warning& Warning::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fnotice_2eproto::scc_info_Warning.base);
  return *internal_default_instance();
}


void Warning::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.Warning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    code_ = 0u;
    level_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.Warning)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::Warning_Level_IsValid(value)) {
            set_level(static_cast< ::Mysqlx::Notice::Warning_Level >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.Warning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.Warning)
  return false;
#undef DO_
}

void Warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.Warning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // required uint32 code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // required string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.Warning)
}

size_t Warning::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Notice.Warning)
  size_t total_size = 0;

  if (has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (has_code()) {
    // required uint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  return total_size;
}
size_t Warning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.Warning)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

    // required uint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Mysqlx.Notice.Warning.Level level = 1 [default = WARNING];
  if (has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Warning::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Warning*>(&from));
}

void Warning::MergeFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.Warning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Warning::CopyFrom(const Warning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.Warning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Warning::Swap(Warning* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Warning::InternalSwap(Warning* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Warning::GetTypeName() const {
  return "Mysqlx.Notice.Warning";
}


// ===================================================================

void SessionVariableChanged::InitAsDefaultInstance() {
  ::Mysqlx::Notice::_SessionVariableChanged_default_instance_._instance.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
}
void SessionVariableChanged::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionVariableChanged::kParamFieldNumber;
const int SessionVariableChanged::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionVariableChanged::SessionVariableChanged()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fnotice_2eproto::scc_info_SessionVariableChanged.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.SessionVariableChanged)
}
SessionVariableChanged::SessionVariableChanged(const SessionVariableChanged& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param()) {
    param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
  }
  if (from.has_value()) {
    value_ = new ::Mysqlx::Datatypes::Scalar(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.SessionVariableChanged)
}

void SessionVariableChanged::SharedCtor() {
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

SessionVariableChanged::~SessionVariableChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.SessionVariableChanged)
  SharedDtor();
}

void SessionVariableChanged::SharedDtor() {
  param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void SessionVariableChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionVariableChanged& SessionVariableChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fnotice_2eproto::scc_info_SessionVariableChanged.base);
  return *internal_default_instance();
}


void SessionVariableChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.SessionVariableChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      param_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionVariableChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.SessionVariableChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.SessionVariableChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.SessionVariableChanged)
  return false;
#undef DO_
}

void SessionVariableChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.SessionVariableChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->param(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.SessionVariableChanged)
}

size_t SessionVariableChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.SessionVariableChanged)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string param = 1;
  if (has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->param());
  }
  // optional .Mysqlx.Datatypes.Scalar value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionVariableChanged::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionVariableChanged*>(&from));
}

void SessionVariableChanged::MergeFrom(const SessionVariableChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.SessionVariableChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_param();
      param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.value());
    }
  }
}

void SessionVariableChanged::CopyFrom(const SessionVariableChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.SessionVariableChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionVariableChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void SessionVariableChanged::Swap(SessionVariableChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionVariableChanged::InternalSwap(SessionVariableChanged* other) {
  using std::swap;
  param_.Swap(&other->param_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SessionVariableChanged::GetTypeName() const {
  return "Mysqlx.Notice.SessionVariableChanged";
}


// ===================================================================

void SessionStateChanged::InitAsDefaultInstance() {
}
void SessionStateChanged::clear_value() {
  value_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionStateChanged::kParamFieldNumber;
const int SessionStateChanged::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionStateChanged::SessionStateChanged()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fnotice_2eproto::scc_info_SessionStateChanged.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.SessionStateChanged)
}
SessionStateChanged::SessionStateChanged(const SessionStateChanged& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_ = from.param_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.SessionStateChanged)
}

void SessionStateChanged::SharedCtor() {
  param_ = 1;
}

SessionStateChanged::~SessionStateChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.SessionStateChanged)
  SharedDtor();
}

void SessionStateChanged::SharedDtor() {
}

void SessionStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionStateChanged& SessionStateChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fnotice_2eproto::scc_info_SessionStateChanged.base);
  return *internal_default_instance();
}


void SessionStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.SessionStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  param_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.SessionStateChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Notice::SessionStateChanged_Parameter_IsValid(value)) {
            set_param(static_cast< ::Mysqlx::Notice::SessionStateChanged_Parameter >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Datatypes.Scalar value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.SessionStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.SessionStateChanged)
  return false;
#undef DO_
}

void SessionStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.SessionStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->param(), output);
  }

  // repeated .Mysqlx.Datatypes.Scalar value = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->value(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.SessionStateChanged)
}

size_t SessionStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.SessionStateChanged)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .Mysqlx.Notice.SessionStateChanged.Parameter param = 1;
  if (has_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
  }
  // repeated .Mysqlx.Datatypes.Scalar value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionStateChanged::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionStateChanged*>(&from));
}

void SessionStateChanged::MergeFrom(const SessionStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.SessionStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.has_param()) {
    set_param(from.param());
  }
}

void SessionStateChanged::CopyFrom(const SessionStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.SessionStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionStateChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  return true;
}

void SessionStateChanged::Swap(SessionStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionStateChanged::InternalSwap(SessionStateChanged* other) {
  using std::swap;
  CastToBase(&value_)->InternalSwap(CastToBase(&other->value_));
  swap(param_, other->param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string SessionStateChanged::GetTypeName() const {
  return "Mysqlx.Notice.SessionStateChanged";
}


// ===================================================================

void GroupReplicationStateChanged::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupReplicationStateChanged::kTypeFieldNumber;
const int GroupReplicationStateChanged::kViewIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupReplicationStateChanged::GroupReplicationStateChanged()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fnotice_2eproto::scc_info_GroupReplicationStateChanged.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.GroupReplicationStateChanged)
}
GroupReplicationStateChanged::GroupReplicationStateChanged(const GroupReplicationStateChanged& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  view_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_view_id()) {
    view_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.GroupReplicationStateChanged)
}

void GroupReplicationStateChanged::SharedCtor() {
  view_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

GroupReplicationStateChanged::~GroupReplicationStateChanged() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.GroupReplicationStateChanged)
  SharedDtor();
}

void GroupReplicationStateChanged::SharedDtor() {
  view_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupReplicationStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupReplicationStateChanged& GroupReplicationStateChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fnotice_2eproto::scc_info_GroupReplicationStateChanged.base);
  return *internal_default_instance();
}


void GroupReplicationStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.GroupReplicationStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    view_id_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupReplicationStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.GroupReplicationStateChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string view_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.GroupReplicationStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.GroupReplicationStateChanged)
  return false;
#undef DO_
}

void GroupReplicationStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.GroupReplicationStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string view_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->view_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.GroupReplicationStateChanged)
}

size_t GroupReplicationStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.GroupReplicationStateChanged)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }
  // optional string view_id = 2;
  if (has_view_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->view_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupReplicationStateChanged::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupReplicationStateChanged*>(&from));
}

void GroupReplicationStateChanged::MergeFrom(const GroupReplicationStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.GroupReplicationStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_view_id();
      view_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupReplicationStateChanged::CopyFrom(const GroupReplicationStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.GroupReplicationStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupReplicationStateChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void GroupReplicationStateChanged::Swap(GroupReplicationStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupReplicationStateChanged::InternalSwap(GroupReplicationStateChanged* other) {
  using std::swap;
  view_id_.Swap(&other->view_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupReplicationStateChanged::GetTypeName() const {
  return "Mysqlx.Notice.GroupReplicationStateChanged";
}


// ===================================================================

void ServerHello::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerHello::ServerHello()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fnotice_2eproto::scc_info_ServerHello.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Notice.ServerHello)
}
ServerHello::ServerHello(const ServerHello& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Notice.ServerHello)
}

void ServerHello::SharedCtor() {
}

ServerHello::~ServerHello() {
  // @@protoc_insertion_point(destructor:Mysqlx.Notice.ServerHello)
  SharedDtor();
}

void ServerHello::SharedDtor() {
}

void ServerHello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerHello& ServerHello::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fnotice_2eproto::scc_info_ServerHello.base);
  return *internal_default_instance();
}


void ServerHello::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Notice.ServerHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Notice.ServerHello)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Notice.ServerHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Notice.ServerHello)
  return false;
#undef DO_
}

void ServerHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Notice.ServerHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Notice.ServerHello)
}

size_t ServerHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Notice.ServerHello)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerHello::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerHello*>(&from));
}

void ServerHello::MergeFrom(const ServerHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Notice.ServerHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerHello::CopyFrom(const ServerHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Notice.ServerHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHello::IsInitialized() const {
  return true;
}

void ServerHello::Swap(ServerHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerHello::InternalSwap(ServerHello* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ServerHello::GetTypeName() const {
  return "Mysqlx.Notice.ServerHello";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Notice
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Notice::Frame* Arena::CreateMaybeMessage< ::Mysqlx::Notice::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::Frame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Notice::Warning* Arena::CreateMaybeMessage< ::Mysqlx::Notice::Warning >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::Warning >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Notice::SessionVariableChanged* Arena::CreateMaybeMessage< ::Mysqlx::Notice::SessionVariableChanged >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::SessionVariableChanged >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Notice::SessionStateChanged* Arena::CreateMaybeMessage< ::Mysqlx::Notice::SessionStateChanged >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::SessionStateChanged >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Notice::GroupReplicationStateChanged* Arena::CreateMaybeMessage< ::Mysqlx::Notice::GroupReplicationStateChanged >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::GroupReplicationStateChanged >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Notice::ServerHello* Arena::CreateMaybeMessage< ::Mysqlx::Notice::ServerHello >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Notice::ServerHello >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
