// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_sql.proto

#ifndef PROTOBUF_INCLUDED_mysqlx_5fsql_2eproto
#define PROTOBUF_INCLUDED_mysqlx_5fsql_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "mysqlx_datatypes.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fsql_2eproto 

namespace protobuf_mysqlx_5fsql_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_mysqlx_5fsql_2eproto
namespace Mysqlx {
namespace Sql {
class StmtExecute;
class StmtExecuteDefaultTypeInternal;
extern StmtExecuteDefaultTypeInternal _StmtExecute_default_instance_;
class StmtExecuteOk;
class StmtExecuteOkDefaultTypeInternal;
extern StmtExecuteOkDefaultTypeInternal _StmtExecuteOk_default_instance_;
}  // namespace Sql
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> ::Mysqlx::Sql::StmtExecute* Arena::CreateMaybeMessage<::Mysqlx::Sql::StmtExecute>(Arena*);
template<> ::Mysqlx::Sql::StmtExecuteOk* Arena::CreateMaybeMessage<::Mysqlx::Sql::StmtExecuteOk>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Mysqlx {
namespace Sql {

// ===================================================================

class StmtExecute : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Sql.StmtExecute) */ {
 public:
  StmtExecute();
  virtual ~StmtExecute();

  StmtExecute(const StmtExecute& from);

  inline StmtExecute& operator=(const StmtExecute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StmtExecute(StmtExecute&& from) noexcept
    : StmtExecute() {
    *this = ::std::move(from);
  }

  inline StmtExecute& operator=(StmtExecute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StmtExecute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StmtExecute* internal_default_instance() {
    return reinterpret_cast<const StmtExecute*>(
               &_StmtExecute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StmtExecute* other);
  friend void swap(StmtExecute& a, StmtExecute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StmtExecute* New() const final {
    return CreateMaybeMessage<StmtExecute>(NULL);
  }

  StmtExecute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StmtExecute>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const StmtExecute& from);
  void MergeFrom(const StmtExecute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StmtExecute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Mysqlx.Datatypes.Any args = 2;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  ::Mysqlx::Datatypes::Any* mutable_args(int index);
  ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
      mutable_args();
  const ::Mysqlx::Datatypes::Any& args(int index) const;
  ::Mysqlx::Datatypes::Any* add_args();
  const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
      args() const;

  // required bytes stmt = 1;
  bool has_stmt() const;
  void clear_stmt();
  static const int kStmtFieldNumber = 1;
  const ::std::string& stmt() const;
  void set_stmt(const ::std::string& value);
  #if LANG_CXX11
  void set_stmt(::std::string&& value);
  #endif
  void set_stmt(const char* value);
  void set_stmt(const void* value, size_t size);
  ::std::string* mutable_stmt();
  ::std::string* release_stmt();
  void set_allocated_stmt(::std::string* stmt);

  // optional string namespace = 3 [default = "sql"];
  bool has_namespace_() const;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 3;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // optional bool compact_metadata = 4 [default = false];
  bool has_compact_metadata() const;
  void clear_compact_metadata();
  static const int kCompactMetadataFieldNumber = 4;
  bool compact_metadata() const;
  void set_compact_metadata(bool value);

  // @@protoc_insertion_point(class_scope:Mysqlx.Sql.StmtExecute)
 private:
  void set_has_namespace_();
  void clear_has_namespace_();
  void set_has_stmt();
  void clear_has_stmt();
  void set_has_compact_metadata();
  void clear_has_compact_metadata();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any > args_;
  ::google::protobuf::internal::ArenaStringPtr stmt_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_namespace__;
  private:
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  bool compact_metadata_;
  friend struct ::protobuf_mysqlx_5fsql_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StmtExecuteOk : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Mysqlx.Sql.StmtExecuteOk) */ {
 public:
  StmtExecuteOk();
  virtual ~StmtExecuteOk();

  StmtExecuteOk(const StmtExecuteOk& from);

  inline StmtExecuteOk& operator=(const StmtExecuteOk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StmtExecuteOk(StmtExecuteOk&& from) noexcept
    : StmtExecuteOk() {
    *this = ::std::move(from);
  }

  inline StmtExecuteOk& operator=(StmtExecuteOk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StmtExecuteOk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StmtExecuteOk* internal_default_instance() {
    return reinterpret_cast<const StmtExecuteOk*>(
               &_StmtExecuteOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StmtExecuteOk* other);
  friend void swap(StmtExecuteOk& a, StmtExecuteOk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StmtExecuteOk* New() const final {
    return CreateMaybeMessage<StmtExecuteOk>(NULL);
  }

  StmtExecuteOk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StmtExecuteOk>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const StmtExecuteOk& from);
  void MergeFrom(const StmtExecuteOk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StmtExecuteOk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Mysqlx.Sql.StmtExecuteOk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mysqlx_5fsql_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StmtExecute

// optional string namespace = 3 [default = "sql"];
inline bool StmtExecute::has_namespace_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StmtExecute::set_has_namespace_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StmtExecute::clear_has_namespace_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StmtExecute::clear_namespace_() {
  namespace__.ClearToDefaultNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
  clear_has_namespace_();
}
inline const ::std::string& StmtExecute::namespace_() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.namespace)
  return namespace__.GetNoArena();
}
inline void StmtExecute::set_namespace_(const ::std::string& value) {
  set_has_namespace_();
  namespace__.SetNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.namespace)
}
#if LANG_CXX11
inline void StmtExecute::set_namespace_(::std::string&& value) {
  set_has_namespace_();
  namespace__.SetNoArena(
    &::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Sql.StmtExecute.namespace)
}
#endif
inline void StmtExecute::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_namespace_();
  namespace__.SetNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Sql.StmtExecute.namespace)
}
inline void StmtExecute::set_namespace_(const char* value, size_t size) {
  set_has_namespace_();
  namespace__.SetNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Sql.StmtExecute.namespace)
}
inline ::std::string* StmtExecute::mutable_namespace_() {
  set_has_namespace_();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.namespace)
  return namespace__.MutableNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
}
inline ::std::string* StmtExecute::release_namespace_() {
  // @@protoc_insertion_point(field_release:Mysqlx.Sql.StmtExecute.namespace)
  if (!has_namespace_()) {
    return NULL;
  }
  clear_has_namespace_();
  return namespace__.ReleaseNonDefaultNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
}
inline void StmtExecute::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    set_has_namespace_();
  } else {
    clear_has_namespace_();
  }
  namespace__.SetAllocatedNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Sql.StmtExecute.namespace)
}

// required bytes stmt = 1;
inline bool StmtExecute::has_stmt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StmtExecute::set_has_stmt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StmtExecute::clear_has_stmt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StmtExecute::clear_stmt() {
  stmt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stmt();
}
inline const ::std::string& StmtExecute::stmt() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.stmt)
  return stmt_.GetNoArena();
}
inline void StmtExecute::set_stmt(const ::std::string& value) {
  set_has_stmt();
  stmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.stmt)
}
#if LANG_CXX11
inline void StmtExecute::set_stmt(::std::string&& value) {
  set_has_stmt();
  stmt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mysqlx.Sql.StmtExecute.stmt)
}
#endif
inline void StmtExecute::set_stmt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stmt();
  stmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mysqlx.Sql.StmtExecute.stmt)
}
inline void StmtExecute::set_stmt(const void* value, size_t size) {
  set_has_stmt();
  stmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mysqlx.Sql.StmtExecute.stmt)
}
inline ::std::string* StmtExecute::mutable_stmt() {
  set_has_stmt();
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.stmt)
  return stmt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StmtExecute::release_stmt() {
  // @@protoc_insertion_point(field_release:Mysqlx.Sql.StmtExecute.stmt)
  if (!has_stmt()) {
    return NULL;
  }
  clear_has_stmt();
  return stmt_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StmtExecute::set_allocated_stmt(::std::string* stmt) {
  if (stmt != NULL) {
    set_has_stmt();
  } else {
    clear_has_stmt();
  }
  stmt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stmt);
  // @@protoc_insertion_point(field_set_allocated:Mysqlx.Sql.StmtExecute.stmt)
}

// repeated .Mysqlx.Datatypes.Any args = 2;
inline int StmtExecute::args_size() const {
  return args_.size();
}
inline ::Mysqlx::Datatypes::Any* StmtExecute::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Mysqlx.Sql.StmtExecute.args)
  return args_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >*
StmtExecute::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Mysqlx.Sql.StmtExecute.args)
  return &args_;
}
inline const ::Mysqlx::Datatypes::Any& StmtExecute::args(int index) const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.args)
  return args_.Get(index);
}
inline ::Mysqlx::Datatypes::Any* StmtExecute::add_args() {
  // @@protoc_insertion_point(field_add:Mysqlx.Sql.StmtExecute.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mysqlx::Datatypes::Any >&
StmtExecute::args() const {
  // @@protoc_insertion_point(field_list:Mysqlx.Sql.StmtExecute.args)
  return args_;
}

// optional bool compact_metadata = 4 [default = false];
inline bool StmtExecute::has_compact_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StmtExecute::set_has_compact_metadata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StmtExecute::clear_has_compact_metadata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StmtExecute::clear_compact_metadata() {
  compact_metadata_ = false;
  clear_has_compact_metadata();
}
inline bool StmtExecute::compact_metadata() const {
  // @@protoc_insertion_point(field_get:Mysqlx.Sql.StmtExecute.compact_metadata)
  return compact_metadata_;
}
inline void StmtExecute::set_compact_metadata(bool value) {
  set_has_compact_metadata();
  compact_metadata_ = value;
  // @@protoc_insertion_point(field_set:Mysqlx.Sql.StmtExecute.compact_metadata)
}

// -------------------------------------------------------------------

// StmtExecuteOk

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sql
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mysqlx_5fsql_2eproto
