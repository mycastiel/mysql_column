// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_sql.proto

#include "mysqlx_sql.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mysqlx_5fdatatypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fdatatypes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Any;
}  // namespace protobuf_mysqlx_5fdatatypes_2eproto
namespace Mysqlx {
namespace Sql {
class StmtExecuteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StmtExecute>
      _instance;
} _StmtExecute_default_instance_;
class StmtExecuteOkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StmtExecuteOk>
      _instance;
} _StmtExecuteOk_default_instance_;
}  // namespace Sql
}  // namespace Mysqlx
namespace protobuf_mysqlx_5fsql_2eproto {
static void InitDefaultsStmtExecute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.DefaultConstruct();
  *::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get_mutable() = ::std::string("sql", 3);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get_mutable());
  {
    void* ptr = &::Mysqlx::Sql::_StmtExecute_default_instance_;
    new (ptr) ::Mysqlx::Sql::StmtExecute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Sql::StmtExecute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StmtExecute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStmtExecute}, {
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base,}};

static void InitDefaultsStmtExecuteOk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Sql::_StmtExecuteOk_default_instance_;
    new (ptr) ::Mysqlx::Sql::StmtExecuteOk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Sql::StmtExecuteOk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StmtExecuteOk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStmtExecuteOk}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StmtExecute.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StmtExecuteOk.base);
}

}  // namespace protobuf_mysqlx_5fsql_2eproto
namespace Mysqlx {
namespace Sql {

// ===================================================================

void StmtExecute::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> StmtExecute::_i_give_permission_to_break_this_code_default_namespace__;
void StmtExecute::clear_args() {
  args_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StmtExecute::kNamespaceFieldNumber;
const int StmtExecute::kStmtFieldNumber;
const int StmtExecute::kArgsFieldNumber;
const int StmtExecute::kCompactMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StmtExecute::StmtExecute()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fsql_2eproto::scc_info_StmtExecute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Sql.StmtExecute)
}
StmtExecute::StmtExecute(const StmtExecute& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stmt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stmt()) {
    stmt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stmt_);
  }
  namespace__.UnsafeSetDefault(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
  if (from.has_namespace_()) {
    namespace__.AssignWithDefault(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), from.namespace__);
  }
  compact_metadata_ = from.compact_metadata_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Sql.StmtExecute)
}

void StmtExecute::SharedCtor() {
  stmt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
  compact_metadata_ = false;
}

StmtExecute::~StmtExecute() {
  // @@protoc_insertion_point(destructor:Mysqlx.Sql.StmtExecute)
  SharedDtor();
}

void StmtExecute::SharedDtor() {
  stmt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
}

void StmtExecute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StmtExecute& StmtExecute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fsql_2eproto::scc_info_StmtExecute.base);
  return *internal_default_instance();
}


void StmtExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Sql.StmtExecute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stmt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.UnsafeMutablePointer()->assign(*&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get());
    }
  }
  compact_metadata_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StmtExecute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Sql.StmtExecute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes stmt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stmt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mysqlx.Datatypes.Any args = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string namespace = 3 [default = "sql"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compact_metadata = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_compact_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compact_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Sql.StmtExecute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Sql.StmtExecute)
  return false;
#undef DO_
}

void StmtExecute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Sql.StmtExecute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes stmt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->stmt(), output);
  }

  // repeated .Mysqlx.Datatypes.Any args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->args(static_cast<int>(i)),
      output);
  }

  // optional string namespace = 3 [default = "sql"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->namespace_(), output);
  }

  // optional bool compact_metadata = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->compact_metadata(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Sql.StmtExecute)
}

size_t StmtExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Sql.StmtExecute)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bytes stmt = 1;
  if (has_stmt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stmt());
  }
  // repeated .Mysqlx.Datatypes.Any args = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->args(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional string namespace = 3 [default = "sql"];
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

    // optional bool compact_metadata = 4 [default = false];
    if (has_compact_metadata()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StmtExecute::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StmtExecute*>(&from));
}

void StmtExecute::MergeFrom(const StmtExecute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Sql.StmtExecute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stmt();
      stmt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stmt_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_namespace_();
      namespace__.AssignWithDefault(&::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(), from.namespace__);
    }
    if (cached_has_bits & 0x00000004u) {
      compact_metadata_ = from.compact_metadata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StmtExecute::CopyFrom(const StmtExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Sql.StmtExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmtExecute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->args())) return false;
  return true;
}

void StmtExecute::Swap(StmtExecute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StmtExecute::InternalSwap(StmtExecute* other) {
  using std::swap;
  CastToBase(&args_)->InternalSwap(CastToBase(&other->args_));
  stmt_.Swap(&other->stmt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  namespace__.Swap(&other->namespace__, &::Mysqlx::Sql::StmtExecute::_i_give_permission_to_break_this_code_default_namespace__.get(),
    GetArenaNoVirtual());
  swap(compact_metadata_, other->compact_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StmtExecute::GetTypeName() const {
  return "Mysqlx.Sql.StmtExecute";
}


// ===================================================================

void StmtExecuteOk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StmtExecuteOk::StmtExecuteOk()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fsql_2eproto::scc_info_StmtExecuteOk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Sql.StmtExecuteOk)
}
StmtExecuteOk::StmtExecuteOk(const StmtExecuteOk& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Sql.StmtExecuteOk)
}

void StmtExecuteOk::SharedCtor() {
}

StmtExecuteOk::~StmtExecuteOk() {
  // @@protoc_insertion_point(destructor:Mysqlx.Sql.StmtExecuteOk)
  SharedDtor();
}

void StmtExecuteOk::SharedDtor() {
}

void StmtExecuteOk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StmtExecuteOk& StmtExecuteOk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fsql_2eproto::scc_info_StmtExecuteOk.base);
  return *internal_default_instance();
}


void StmtExecuteOk::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Sql.StmtExecuteOk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StmtExecuteOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Sql.StmtExecuteOk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Sql.StmtExecuteOk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Sql.StmtExecuteOk)
  return false;
#undef DO_
}

void StmtExecuteOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Sql.StmtExecuteOk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Sql.StmtExecuteOk)
}

size_t StmtExecuteOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Sql.StmtExecuteOk)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StmtExecuteOk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StmtExecuteOk*>(&from));
}

void StmtExecuteOk::MergeFrom(const StmtExecuteOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Sql.StmtExecuteOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StmtExecuteOk::CopyFrom(const StmtExecuteOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Sql.StmtExecuteOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StmtExecuteOk::IsInitialized() const {
  return true;
}

void StmtExecuteOk::Swap(StmtExecuteOk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StmtExecuteOk::InternalSwap(StmtExecuteOk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StmtExecuteOk::GetTypeName() const {
  return "Mysqlx.Sql.StmtExecuteOk";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Sql
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Sql::StmtExecute* Arena::CreateMaybeMessage< ::Mysqlx::Sql::StmtExecute >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Sql::StmtExecute >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Sql::StmtExecuteOk* Arena::CreateMaybeMessage< ::Mysqlx::Sql::StmtExecuteOk >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Sql::StmtExecuteOk >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
