// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_datatypes.proto

#include "mysqlx_datatypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mysqlx_5fdatatypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fdatatypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scalar_Octets;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fdatatypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Scalar_String;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fdatatypes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Any;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mysqlx_5fdatatypes_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Scalar;
}  // namespace protobuf_mysqlx_5fdatatypes_2eproto
namespace Mysqlx {
namespace Datatypes {
class Scalar_StringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scalar_String>
      _instance;
} _Scalar_String_default_instance_;
class Scalar_OctetsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scalar_Octets>
      _instance;
} _Scalar_Octets_default_instance_;
class ScalarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scalar>
      _instance;
} _Scalar_default_instance_;
class Object_ObjectFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object_ObjectField>
      _instance;
} _Object_ObjectField_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object>
      _instance;
} _Object_default_instance_;
class ArrayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Array>
      _instance;
} _Array_default_instance_;
class AnyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Any>
      _instance;
} _Any_default_instance_;
}  // namespace Datatypes
}  // namespace Mysqlx
namespace protobuf_mysqlx_5fdatatypes_2eproto {
static void InitDefaultsScalar_String() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Datatypes::_Scalar_String_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Scalar_String();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Datatypes::Scalar_String::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scalar_String =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScalar_String}, {}};

static void InitDefaultsScalar_Octets() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Datatypes::_Scalar_Octets_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Scalar_Octets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Datatypes::Scalar_Octets::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Scalar_Octets =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScalar_Octets}, {}};

static void InitDefaultsScalar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Datatypes::_Scalar_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Scalar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Datatypes::Scalar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Scalar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsScalar}, {
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar_Octets.base,
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar_String.base,}};

static void InitDefaultsAny() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::Datatypes::_Object_ObjectField_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Object_ObjectField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Datatypes::_Object_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Datatypes::_Array_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Array();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::Mysqlx::Datatypes::_Any_default_instance_;
    new (ptr) ::Mysqlx::Datatypes::Any();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Datatypes::Object_ObjectField::InitAsDefaultInstance();
  ::Mysqlx::Datatypes::Object::InitAsDefaultInstance();
  ::Mysqlx::Datatypes::Array::InitAsDefaultInstance();
  ::Mysqlx::Datatypes::Any::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Any =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAny}, {
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Scalar_String.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scalar_Octets.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Scalar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Any.base);
}

}  // namespace protobuf_mysqlx_5fdatatypes_2eproto
namespace Mysqlx {
namespace Datatypes {
bool Scalar_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scalar_Type Scalar::V_SINT;
const Scalar_Type Scalar::V_UINT;
const Scalar_Type Scalar::V_NULL;
const Scalar_Type Scalar::V_OCTETS;
const Scalar_Type Scalar::V_DOUBLE;
const Scalar_Type Scalar::V_FLOAT;
const Scalar_Type Scalar::V_BOOL;
const Scalar_Type Scalar::V_STRING;
const Scalar_Type Scalar::Type_MIN;
const Scalar_Type Scalar::Type_MAX;
const int Scalar::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Any_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Any_Type Any::SCALAR;
const Any_Type Any::OBJECT;
const Any_Type Any::ARRAY;
const Any_Type Any::Type_MIN;
const Any_Type Any::Type_MAX;
const int Any::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Scalar_String::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar_String::kValueFieldNumber;
const int Scalar_String::kCollationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar_String::Scalar_String()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar_String.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar.String)
}
Scalar_String::Scalar_String(const Scalar_String& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  collation_ = from.collation_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar.String)
}

void Scalar_String::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collation_ = GOOGLE_ULONGLONG(0);
}

Scalar_String::~Scalar_String() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar.String)
  SharedDtor();
}

void Scalar_String::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scalar_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar_String& Scalar_String::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar_String.base);
  return *internal_default_instance();
}


void Scalar_String::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar.String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  collation_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Scalar_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar.String)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 collation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_collation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar.String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar.String)
  return false;
#undef DO_
}

void Scalar_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar.String)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional uint64 collation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->collation(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar.String)
}

size_t Scalar_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar.String)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }
  // optional uint64 collation = 2;
  if (has_collation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar_String::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Scalar_String*>(&from));
}

void Scalar_String::MergeFrom(const Scalar_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      collation_ = from.collation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scalar_String::CopyFrom(const Scalar_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_String::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Scalar_String::Swap(Scalar_String* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar_String::InternalSwap(Scalar_String* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(collation_, other->collation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Scalar_String::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar.String";
}


// ===================================================================

void Scalar_Octets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar_Octets::kValueFieldNumber;
const int Scalar_Octets::kContentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar_Octets::Scalar_Octets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar_Octets.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar.Octets)
}
Scalar_Octets::Scalar_Octets(const Scalar_Octets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar.Octets)
}

void Scalar_Octets::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0u;
}

Scalar_Octets::~Scalar_Octets() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar.Octets)
  SharedDtor();
}

void Scalar_Octets::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scalar_Octets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar_Octets& Scalar_Octets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar_Octets.base);
  return *internal_default_instance();
}


void Scalar_Octets::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar.Octets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  content_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Scalar_Octets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar.Octets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 content_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_content_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &content_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar.Octets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar.Octets)
  return false;
#undef DO_
}

void Scalar_Octets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar.Octets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional uint32 content_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->content_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar.Octets)
}

size_t Scalar_Octets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar.Octets)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }
  // optional uint32 content_type = 2;
  if (has_content_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->content_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar_Octets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Scalar_Octets*>(&from));
}

void Scalar_Octets::MergeFrom(const Scalar_Octets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar.Octets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      content_type_ = from.content_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scalar_Octets::CopyFrom(const Scalar_Octets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar.Octets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_Octets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Scalar_Octets::Swap(Scalar_Octets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar_Octets::InternalSwap(Scalar_Octets* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_type_, other->content_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Scalar_Octets::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar.Octets";
}


// ===================================================================

void Scalar::InitAsDefaultInstance() {
  ::Mysqlx::Datatypes::_Scalar_default_instance_._instance.get_mutable()->v_octets_ = const_cast< ::Mysqlx::Datatypes::Scalar_Octets*>(
      ::Mysqlx::Datatypes::Scalar_Octets::internal_default_instance());
  ::Mysqlx::Datatypes::_Scalar_default_instance_._instance.get_mutable()->v_string_ = const_cast< ::Mysqlx::Datatypes::Scalar_String*>(
      ::Mysqlx::Datatypes::Scalar_String::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar::kTypeFieldNumber;
const int Scalar::kVSignedIntFieldNumber;
const int Scalar::kVUnsignedIntFieldNumber;
const int Scalar::kVOctetsFieldNumber;
const int Scalar::kVDoubleFieldNumber;
const int Scalar::kVFloatFieldNumber;
const int Scalar::kVBoolFieldNumber;
const int Scalar::kVStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar::Scalar()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_v_octets()) {
    v_octets_ = new ::Mysqlx::Datatypes::Scalar_Octets(*from.v_octets_);
  } else {
    v_octets_ = NULL;
  }
  if (from.has_v_string()) {
    v_string_ = new ::Mysqlx::Datatypes::Scalar_String(*from.v_string_);
  } else {
    v_string_ = NULL;
  }
  ::memcpy(&v_signed_int_, &from.v_signed_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&v_signed_int_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Scalar)
}

void Scalar::SharedCtor() {
  ::memset(&v_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_bool_) -
      reinterpret_cast<char*>(&v_octets_)) + sizeof(v_bool_));
  type_ = 1;
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Scalar)
  SharedDtor();
}

void Scalar::SharedDtor() {
  if (this != internal_default_instance()) delete v_octets_;
  if (this != internal_default_instance()) delete v_string_;
}

void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar& Scalar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Scalar.base);
  return *internal_default_instance();
}


void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Scalar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(v_octets_ != NULL);
      v_octets_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(v_string_ != NULL);
      v_string_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&v_signed_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v_bool_) -
        reinterpret_cast<char*>(&v_signed_int_)) + sizeof(v_bool_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Scalar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Datatypes.Scalar.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Datatypes::Scalar_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Datatypes::Scalar_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 v_signed_int = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_v_signed_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &v_signed_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 v_unsigned_int = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_v_unsigned_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &v_unsigned_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v_octets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v_double = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_v_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_float = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_v_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool v_bool = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_v_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Scalar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Scalar)
  return false;
#undef DO_
}

void Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Scalar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional sint64 v_signed_int = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->v_signed_int(), output);
  }

  // optional uint64 v_unsigned_int = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->v_unsigned_int(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_v_octets(), output);
  }

  // optional double v_double = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->v_double(), output);
  }

  // optional float v_float = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->v_float(), output);
  }

  // optional bool v_bool = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->v_bool(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_v_string(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Scalar)
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Scalar)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .Mysqlx.Datatypes.Scalar.Octets v_octets = 5;
    if (has_v_octets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *v_octets_);
    }

    // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
    if (has_v_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *v_string_);
    }

    // optional sint64 v_signed_int = 2;
    if (has_v_signed_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->v_signed_int());
    }

    // optional uint64 v_unsigned_int = 3;
    if (has_v_unsigned_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->v_unsigned_int());
    }

    // optional double v_double = 6;
    if (has_v_double()) {
      total_size += 1 + 8;
    }

    // optional float v_float = 7;
    if (has_v_float()) {
      total_size += 1 + 4;
    }

    // optional bool v_bool = 8;
    if (has_v_bool()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Scalar*>(&from));
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_v_octets()->::Mysqlx::Datatypes::Scalar_Octets::MergeFrom(from.v_octets());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_v_string()->::Mysqlx::Datatypes::Scalar_String::MergeFrom(from.v_string());
    }
    if (cached_has_bits & 0x00000004u) {
      v_signed_int_ = from.v_signed_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_unsigned_int_ = from.v_unsigned_int_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_double_ = from.v_double_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_float_ = from.v_float_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_bool_ = from.v_bool_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (has_v_octets()) {
    if (!this->v_octets_->IsInitialized()) return false;
  }
  if (has_v_string()) {
    if (!this->v_string_->IsInitialized()) return false;
  }
  return true;
}

void Scalar::Swap(Scalar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  swap(v_octets_, other->v_octets_);
  swap(v_string_, other->v_string_);
  swap(v_signed_int_, other->v_signed_int_);
  swap(v_unsigned_int_, other->v_unsigned_int_);
  swap(v_double_, other->v_double_);
  swap(v_float_, other->v_float_);
  swap(v_bool_, other->v_bool_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Scalar::GetTypeName() const {
  return "Mysqlx.Datatypes.Scalar";
}


// ===================================================================

void Object_ObjectField::InitAsDefaultInstance() {
  ::Mysqlx::Datatypes::_Object_ObjectField_default_instance_._instance.get_mutable()->value_ = const_cast< ::Mysqlx::Datatypes::Any*>(
      ::Mysqlx::Datatypes::Any::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object_ObjectField::kKeyFieldNumber;
const int Object_ObjectField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object_ObjectField::Object_ObjectField()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Object.ObjectField)
}
Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::Mysqlx::Datatypes::Any(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Object.ObjectField)
}

void Object_ObjectField::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

Object_ObjectField::~Object_ObjectField() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Object.ObjectField)
  SharedDtor();
}

void Object_ObjectField::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Object_ObjectField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object_ObjectField& Object_ObjectField::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base);
  return *internal_default_instance();
}


void Object_ObjectField::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Object.ObjectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object_ObjectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Object.ObjectField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Mysqlx.Datatypes.Any value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Object.ObjectField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Object.ObjectField)
  return false;
#undef DO_
}

void Object_ObjectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Object.ObjectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Object.ObjectField)
}

size_t Object_ObjectField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Datatypes.Object.ObjectField)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t Object_ObjectField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Object.ObjectField)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required .Mysqlx.Datatypes.Any value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_ObjectField::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Object_ObjectField*>(&from));
}

void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Object.ObjectField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::Mysqlx::Datatypes::Any::MergeFrom(from.value());
    }
  }
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Object.ObjectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::Swap(Object_ObjectField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object_ObjectField::InternalSwap(Object_ObjectField* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Object_ObjectField::GetTypeName() const {
  return "Mysqlx.Datatypes.Object.ObjectField";
}


// ===================================================================

void Object::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kFldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      fld_(from.fld_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Object)
}

void Object::SharedCtor() {
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Object)
  SharedDtor();
}

void Object::SharedDtor() {
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fld_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fld()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fld_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->fld(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Object)
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Object)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fld_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fld(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Object*>(&from));
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fld_.MergeFrom(from.fld_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->fld())) return false;
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  CastToBase(&fld_)->InternalSwap(CastToBase(&other->fld_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Object::GetTypeName() const {
  return "Mysqlx.Datatypes.Object";
}


// ===================================================================

void Array::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Array::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Array::Array()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Array)
}
Array::Array(const Array& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Array)
}

void Array::SharedCtor() {
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Array)
  SharedDtor();
}

void Array::SharedDtor() {
}

void Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Array& Array::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base);
  return *internal_default_instance();
}


void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Array)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Datatypes.Any value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Array)
  return false;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Mysqlx.Datatypes.Any value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->value(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Array)
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Array)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .Mysqlx.Datatypes.Any value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Array::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Array*>(&from));
}

void Array::MergeFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  return true;
}

void Array::Swap(Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Array::InternalSwap(Array* other) {
  using std::swap;
  CastToBase(&value_)->InternalSwap(CastToBase(&other->value_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Array::GetTypeName() const {
  return "Mysqlx.Datatypes.Array";
}


// ===================================================================

void Any::InitAsDefaultInstance() {
  ::Mysqlx::Datatypes::_Any_default_instance_._instance.get_mutable()->scalar_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(
      ::Mysqlx::Datatypes::Scalar::internal_default_instance());
  ::Mysqlx::Datatypes::_Any_default_instance_._instance.get_mutable()->obj_ = const_cast< ::Mysqlx::Datatypes::Object*>(
      ::Mysqlx::Datatypes::Object::internal_default_instance());
  ::Mysqlx::Datatypes::_Any_default_instance_._instance.get_mutable()->array_ = const_cast< ::Mysqlx::Datatypes::Array*>(
      ::Mysqlx::Datatypes::Array::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Any::kTypeFieldNumber;
const int Any::kScalarFieldNumber;
const int Any::kObjFieldNumber;
const int Any::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Any::Any()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Datatypes.Any)
}
Any::Any(const Any& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scalar()) {
    scalar_ = new ::Mysqlx::Datatypes::Scalar(*from.scalar_);
  } else {
    scalar_ = NULL;
  }
  if (from.has_obj()) {
    obj_ = new ::Mysqlx::Datatypes::Object(*from.obj_);
  } else {
    obj_ = NULL;
  }
  if (from.has_array()) {
    array_ = new ::Mysqlx::Datatypes::Array(*from.array_);
  } else {
    array_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Datatypes.Any)
}

void Any::SharedCtor() {
  ::memset(&scalar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&array_) -
      reinterpret_cast<char*>(&scalar_)) + sizeof(array_));
  type_ = 1;
}

Any::~Any() {
  // @@protoc_insertion_point(destructor:Mysqlx.Datatypes.Any)
  SharedDtor();
}

void Any::SharedDtor() {
  if (this != internal_default_instance()) delete scalar_;
  if (this != internal_default_instance()) delete obj_;
  if (this != internal_default_instance()) delete array_;
}

void Any::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Any& Any::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_5fdatatypes_2eproto::scc_info_Any.base);
  return *internal_default_instance();
}


void Any::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Datatypes.Any)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scalar_ != NULL);
      scalar_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obj_ != NULL);
      obj_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(array_ != NULL);
      array_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Any::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Datatypes.Any)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Datatypes.Any.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Datatypes::Any_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Datatypes::Any_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar scalar = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scalar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Object obj = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Mysqlx.Datatypes.Array array = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Datatypes.Any)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Datatypes.Any)
  return false;
#undef DO_
}

void Any::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Datatypes.Any)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar scalar = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_scalar(), output);
  }

  // optional .Mysqlx.Datatypes.Object obj = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_obj(), output);
  }

  // optional .Mysqlx.Datatypes.Array array = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_array(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Datatypes.Any)
}

size_t Any::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Datatypes.Any)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .Mysqlx.Datatypes.Scalar scalar = 2;
    if (has_scalar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scalar_);
    }

    // optional .Mysqlx.Datatypes.Object obj = 3;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *obj_);
    }

    // optional .Mysqlx.Datatypes.Array array = 4;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *array_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Any::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Any*>(&from));
}

void Any::MergeFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Datatypes.Any)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_scalar()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.scalar());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_obj()->::Mysqlx::Datatypes::Object::MergeFrom(from.obj());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_array()->::Mysqlx::Datatypes::Array::MergeFrom(from.array());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Any::CopyFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Datatypes.Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_scalar()) {
    if (!this->scalar_->IsInitialized()) return false;
  }
  if (has_obj()) {
    if (!this->obj_->IsInitialized()) return false;
  }
  if (has_array()) {
    if (!this->array_->IsInitialized()) return false;
  }
  return true;
}

void Any::Swap(Any* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Any::InternalSwap(Any* other) {
  using std::swap;
  swap(scalar_, other->scalar_);
  swap(obj_, other->obj_);
  swap(array_, other->array_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Any::GetTypeName() const {
  return "Mysqlx.Datatypes.Any";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Datatypes
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Datatypes::Scalar_String* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Scalar_String >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Scalar_String >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Datatypes::Scalar_Octets* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Scalar_Octets >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Scalar_Octets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Datatypes::Scalar* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Scalar >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Scalar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Datatypes::Object_ObjectField* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Object_ObjectField >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Object_ObjectField >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Datatypes::Object* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Object >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Object >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Datatypes::Array* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Array >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Array >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Datatypes::Any* Arena::CreateMaybeMessage< ::Mysqlx::Datatypes::Any >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Datatypes::Any >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
