// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx.proto

#include "mysqlx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace Mysqlx {
class ClientMessagesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientMessages>
      _instance;
} _ClientMessages_default_instance_;
class ServerMessagesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerMessages>
      _instance;
} _ServerMessages_default_instance_;
class OkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ok>
      _instance;
} _Ok_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Error>
      _instance;
} _Error_default_instance_;
}  // namespace Mysqlx
namespace protobuf_mysqlx_2eproto {
static void InitDefaultsClientMessages() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::_ClientMessages_default_instance_;
    new (ptr) ::Mysqlx::ClientMessages();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::ClientMessages::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientMessages =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientMessages}, {}};

static void InitDefaultsServerMessages() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::_ServerMessages_default_instance_;
    new (ptr) ::Mysqlx::ServerMessages();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::ServerMessages::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerMessages =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerMessages}, {}};

static void InitDefaultsOk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::_Ok_default_instance_;
    new (ptr) ::Mysqlx::Ok();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Ok::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ok =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOk}, {}};

static void InitDefaultsError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Mysqlx::_Error_default_instance_;
    new (ptr) ::Mysqlx::Error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mysqlx::Error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Error =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsError}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ClientMessages.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerMessages.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ok.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Error.base);
}

}  // namespace protobuf_mysqlx_2eproto
namespace Mysqlx {
bool ClientMessages_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 12:
    case 17:
    case 18:
    case 19:
    case 20:
    case 24:
    case 25:
    case 30:
    case 31:
    case 32:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientMessages_Type ClientMessages::CON_CAPABILITIES_GET;
const ClientMessages_Type ClientMessages::CON_CAPABILITIES_SET;
const ClientMessages_Type ClientMessages::CON_CLOSE;
const ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_START;
const ClientMessages_Type ClientMessages::SESS_AUTHENTICATE_CONTINUE;
const ClientMessages_Type ClientMessages::SESS_RESET;
const ClientMessages_Type ClientMessages::SESS_CLOSE;
const ClientMessages_Type ClientMessages::SQL_STMT_EXECUTE;
const ClientMessages_Type ClientMessages::CRUD_FIND;
const ClientMessages_Type ClientMessages::CRUD_INSERT;
const ClientMessages_Type ClientMessages::CRUD_UPDATE;
const ClientMessages_Type ClientMessages::CRUD_DELETE;
const ClientMessages_Type ClientMessages::EXPECT_OPEN;
const ClientMessages_Type ClientMessages::EXPECT_CLOSE;
const ClientMessages_Type ClientMessages::CRUD_CREATE_VIEW;
const ClientMessages_Type ClientMessages::CRUD_MODIFY_VIEW;
const ClientMessages_Type ClientMessages::CRUD_DROP_VIEW;
const ClientMessages_Type ClientMessages::PREPARE_PREPARE;
const ClientMessages_Type ClientMessages::PREPARE_EXECUTE;
const ClientMessages_Type ClientMessages::PREPARE_DEALLOCATE;
const ClientMessages_Type ClientMessages::CURSOR_OPEN;
const ClientMessages_Type ClientMessages::CURSOR_CLOSE;
const ClientMessages_Type ClientMessages::CURSOR_FETCH;
const ClientMessages_Type ClientMessages::Type_MIN;
const ClientMessages_Type ClientMessages::Type_MAX;
const int ClientMessages::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ServerMessages_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServerMessages_Type ServerMessages::OK;
const ServerMessages_Type ServerMessages::ERROR;
const ServerMessages_Type ServerMessages::CONN_CAPABILITIES;
const ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_CONTINUE;
const ServerMessages_Type ServerMessages::SESS_AUTHENTICATE_OK;
const ServerMessages_Type ServerMessages::NOTICE;
const ServerMessages_Type ServerMessages::RESULTSET_COLUMN_META_DATA;
const ServerMessages_Type ServerMessages::RESULTSET_ROW;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_SUSPENDED;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_RESULTSETS;
const ServerMessages_Type ServerMessages::SQL_STMT_EXECUTE_OK;
const ServerMessages_Type ServerMessages::RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
const ServerMessages_Type ServerMessages::Type_MIN;
const ServerMessages_Type ServerMessages::Type_MAX;
const int ServerMessages::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Error_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Error_Severity Error::ERROR;
const Error_Severity Error::FATAL;
const Error_Severity Error::Severity_MIN;
const Error_Severity Error::Severity_MAX;
const int Error::Severity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ClientMessages::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMessages::ClientMessages()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_2eproto::scc_info_ClientMessages.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.ClientMessages)
}
ClientMessages::ClientMessages(const ClientMessages& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.ClientMessages)
}

void ClientMessages::SharedCtor() {
}

ClientMessages::~ClientMessages() {
  // @@protoc_insertion_point(destructor:Mysqlx.ClientMessages)
  SharedDtor();
}

void ClientMessages::SharedDtor() {
}

void ClientMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessages& ClientMessages::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_2eproto::scc_info_ClientMessages.base);
  return *internal_default_instance();
}


void ClientMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.ClientMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.ClientMessages)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.ClientMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.ClientMessages)
  return false;
#undef DO_
}

void ClientMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.ClientMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.ClientMessages)
}

size_t ClientMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.ClientMessages)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessages::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientMessages*>(&from));
}

void ClientMessages::MergeFrom(const ClientMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.ClientMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClientMessages::CopyFrom(const ClientMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.ClientMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessages::IsInitialized() const {
  return true;
}

void ClientMessages::Swap(ClientMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMessages::InternalSwap(ClientMessages* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ClientMessages::GetTypeName() const {
  return "Mysqlx.ClientMessages";
}


// ===================================================================

void ServerMessages::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMessages::ServerMessages()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_2eproto::scc_info_ServerMessages.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.ServerMessages)
}
ServerMessages::ServerMessages(const ServerMessages& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mysqlx.ServerMessages)
}

void ServerMessages::SharedCtor() {
}

ServerMessages::~ServerMessages() {
  // @@protoc_insertion_point(destructor:Mysqlx.ServerMessages)
  SharedDtor();
}

void ServerMessages::SharedDtor() {
}

void ServerMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerMessages& ServerMessages::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_2eproto::scc_info_ServerMessages.base);
  return *internal_default_instance();
}


void ServerMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.ServerMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.ServerMessages)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.ServerMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.ServerMessages)
  return false;
#undef DO_
}

void ServerMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.ServerMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.ServerMessages)
}

size_t ServerMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.ServerMessages)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessages::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMessages*>(&from));
}

void ServerMessages::MergeFrom(const ServerMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.ServerMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerMessages::CopyFrom(const ServerMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.ServerMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessages::IsInitialized() const {
  return true;
}

void ServerMessages::Swap(ServerMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMessages::InternalSwap(ServerMessages* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ServerMessages::GetTypeName() const {
  return "Mysqlx.ServerMessages";
}


// ===================================================================

void Ok::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ok::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ok::Ok()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_2eproto::scc_info_Ok.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Ok)
}
Ok::Ok(const Ok& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Ok)
}

void Ok::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Ok::~Ok() {
  // @@protoc_insertion_point(destructor:Mysqlx.Ok)
  SharedDtor();
}

void Ok::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ok::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ok& Ok::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_2eproto::scc_info_Ok.base);
  return *internal_default_instance();
}


void Ok::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Ok)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ok::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Ok)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Ok)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Ok)
  return false;
#undef DO_
}

void Ok::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Ok)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Ok)
}

size_t Ok::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Ok)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ok::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Ok*>(&from));
}

void Ok::MergeFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Ok)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    set_has_msg();
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Ok::CopyFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Ok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ok::IsInitialized() const {
  return true;
}

void Ok::Swap(Ok* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ok::InternalSwap(Ok* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Ok::GetTypeName() const {
  return "Mysqlx.Ok";
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kSeverityFieldNumber;
const int Error::kCodeFieldNumber;
const int Error::kSqlStateFieldNumber;
const int Error::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mysqlx_2eproto::scc_info_Error.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mysqlx.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  sql_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sql_state()) {
    sql_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_state_);
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:Mysqlx.Error)
}

void Error::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(code_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:Mysqlx.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mysqlx_2eproto::scc_info_Error.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:Mysqlx.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sql_state_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&severity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&severity_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Mysqlx.Error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Error_Severity_IsValid(value)) {
            set_severity(static_cast< ::Mysqlx::Error_Severity >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sql_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mysqlx.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mysqlx.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mysqlx.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->severity(), output);
  }

  // required uint32 code = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // required string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // required string sql_state = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sql_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Mysqlx.Error)
}

size_t Error::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Mysqlx.Error)
  size_t total_size = 0;

  if (has_msg()) {
    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (has_sql_state()) {
    // required string sql_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql_state());
  }

  if (has_code()) {
    // required uint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  return total_size;
}
size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mysqlx.Error)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

    // required string sql_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql_state());

    // required uint32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Mysqlx.Error.Severity severity = 1 [default = ERROR];
  if (has_severity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Error*>(&from));
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mysqlx.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sql_state();
      sql_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_state_);
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mysqlx.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sql_state_.Swap(&other->sql_state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(severity_, other->severity_);
  swap(code_, other->code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Error::GetTypeName() const {
  return "Mysqlx.Error";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Mysqlx
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::ClientMessages* Arena::CreateMaybeMessage< ::Mysqlx::ClientMessages >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::ClientMessages >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::ServerMessages* Arena::CreateMaybeMessage< ::Mysqlx::ServerMessages >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::ServerMessages >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Ok* Arena::CreateMaybeMessage< ::Mysqlx::Ok >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Ok >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mysqlx::Error* Arena::CreateMaybeMessage< ::Mysqlx::Error >(Arena* arena) {
  return Arena::CreateInternal< ::Mysqlx::Error >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
